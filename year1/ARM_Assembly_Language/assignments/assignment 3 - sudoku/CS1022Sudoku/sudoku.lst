


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             Sudoku, CODE, READONLY
    2 00000000                 IMPORT           main
    3 00000000                 IMPORT           sendchar
    4 00000000                 EXPORT           start
    5 00000000                 PRESERVE8
    6 00000000         
    7 00000000         start
    8 00000000         
    9 00000000         ;
   10 00000000         ; write tests for getSquare subroutine
   11 00000000         ;
   12 00000000         ; LDR R0, =loadGrid
   13 00000000         ; MOV R1, #0
   14 00000000         ; MOV R2, #1  ; value = getSquare(Row : 0, Column : 0, a
                       ddress)
   15 00000000         ; BL getSquare ; (compare value in R0 with value at posi
                       tion selected in grid)
   16 00000000         
   17 00000000         ;
   18 00000000         ; write tests for setSquare subroutine
   19 00000000         ;
   20 00000000         ; LDR R3,= testGridOne
   21 00000000         ; STR R3, [sp, #-4]!;
   22 00000000         ; LDR R0, =5
   23 00000000         ; MOV R1, #0
   24 00000000         ; MOV R2, #0; setSquare(Row: 0, Column: 2, Value (byte):
                        5)
   25 00000000         ; BL setSquare;
   26 00000000         ; ADD sp, sp, #4;
   27 00000000         ;to test : execute and copy address in R3 into memory wi
                       ndow. Check for the value at the position (Row, Column) 
                       set.
   28 00000000         
   29 00000000         ;
   30 00000000         ; write tests for isValid subroutine
   31 00000000         ;
   32 00000000         ; MOV R1, #0
   33 00000000         ; MOV R2, #0;
   34 00000000         ; LDR R0,= testGridThree
   35 00000000         ; BL checkSquare; Returns true or false in R0 
   36 00000000         ; checks for validity at position (Row : R1, Column : R2
                       ). Will check for : the row, the column and the sub-squa
                       re's validity
   37 00000000         
   38 00000000         ;
   39 00000000         ;testing displayText subroutine
   40 00000000         ;gets an address parameter (of an array of characters : 
                       a string) and displays it on the console
   41 00000000         ;LDR R0,=displayTextSolved ; load the address of some nu
                       ll terminated text string
   42 00000000         ;BL displayText   
   43 00000000         ; run the program and look inside the console to test
   44 00000000         
   45 00000000         
   46 00000000         ;testing the 2 print grids subroutine
   47 00000000         ;printGrid goes through all of the rows and calls printR
                       ow, then jumps to next line
   48 00000000         ;printRow goes through all of the value contained in a s
                       pecific row and returns the value (converted to ascii) i



ARM Macro Assembler    Page 2 


                       n the console
   49 00000000         
   50 00000000         ;to print a specific row into the console 
   51 00000000         ;LDR R1,=1;
   52 00000000         ;LDR R2,= loadGrid
   53 00000000         ;BL printRow; printing row 1 (rows start at index 0)
   54 00000000         
   55 00000000         ;to print the entire grid 
   56 00000000         ;LDR R1, =loadGrid
   57 00000000         ;BL printGrid
   58 00000000         
   59 00000000         
   60 00000000         ; test sudoku subroutine / mainline
   61 00000000         ;shows inside the console the original grid and after ex
                       ecuting the sudoku subroutine the (solved) grid is displ
                       ayed again (including text messages to explain more clea
                       rly what's happening)
   62 00000000         
   63 00000000         ;DELETE COMMAS TO TEST FULL PROGRAM (with display and un
                       iqueness checking)
   64 00000000         ; LDR R1,= displayTextNonSolved; displayText(nonSolved)
   65 00000000         ; BL displayText;
   66 00000000         ; LDR R1,= multiSolutionGrid
   67 00000000         ; BL printGrid    ; printGrid(gridAddress)
   68 00000000         ; MOV R1, #0
   69 00000000         ; MOV R2, #0
   70 00000000         ; LDR R0,= multiSolutionGrid;
   71 00000000         ; LDR R10,= 0;
   72 00000000         ; LDR R11,= 0;
   73 00000000         ; STMFD sp!, {R10, R11}
   74 00000000         ; BL sudoku     ;sudoku(address, row, column, Boolean : 
                       unique, boolean : isNotUnique) //solve current grid
   75 00000000         ; ADD SP, SP, #8;
   76 00000000         ; MOV R3, R0     ;save (boolean result)
   77 00000000         ; MOV R4, R1     ; save boolean(unique)
   78 00000000         ; LDR R1,= displayTextFinal ; displayText(finalGrid)
   79 00000000         ; BL displayText; 
   80 00000000         ; LDR R1,= finalGrid 
   81 00000000         ; BL printGrid    ;displayFinalGrid
   82 00000000         ; LDR R0,=10;   print(new line)
   83 00000000         ; BL sendchar
   84 00000000         ;
   85 00000000         ; CMP R4, #1;   if(unique) display(uniqueSolutionString)
                       
   86 00000000         ; BNE notUniqueText
   87 00000000         ; LDR R1,= uniqueSolution
   88 00000000         ; B uniqueIsFalse
   89 00000000         ;notUniqueText   ; else display(multipleSolutionsString)
                       ;
   90 00000000         ; LDR R1,= multipleSolutions
   91 00000000         ;uniqueIsFalse
   92 00000000         
   93 00000000         ; BL displayText; 
   94 00000000         
   95 00000000         ;PROVIDED TESTING METHOD
   96 00000000 E3A03001        LDR              R3, =1
   97 00000004         testStageOne
   98 00000004 E3530009        CMP              R3, #9
   99 00000008 CA000007        BGT              testStageTwo



ARM Macro Assembler    Page 3 


  100 0000000C E59F068C        LDR              R0, =testGridOne
  101 00000010 E5C03000        STRB             R3, [R0]
  102 00000014 E3A01000        LDR              R1, =0
  103 00000018 E3A02000        LDR              R2, =0
  104 0000001C EB00003F        BL               isValid
  105 00000020 E1A04000        MOV              R4, R0      ;
  106 00000024 E2833001        ADD              R3, R3, #1  ; put a break point
                                                             here - only 1 shou
                                                            ld be valid
  107 00000028 EAFFFFF5        B                testStageOne
  108 0000002C         
  109 0000002C         ; my sudoku subroutine will search for 2 solutions. Or t
                       ry all of the different solutions (which makes solving 
  110 0000002C         ; unique solution grids innefficient). It will return a 
                       boolean value if 2 solutions have been found or not.
  111 0000002C         testStageTwo
  112 0000002C E59F0670        LDR              R0, =testGridTwo
  113 00000030 E3A01000        LDR              R1, =0
  114 00000034 E3A02000        LDR              R2, =0
  115 00000038 E3A0A000        LDR              R10,= 0     ;
  116 0000003C E3A0B000        LDR              R11,= 0     ;
  117 00000040 E92D0C00        STMFD            sp!, {R10, R11}
  118 00000044 EB0000EE        BL               sudoku      ;sudoku(address, ro
                                                            w, column, Boolean 
                                                            : unique, boolean :
                                                             isNotUnique) //sol
                                                            ve current grid
  119 00000048 E28DD008        ADD              SP, SP, #8  ;
  120 0000004C         
  121 0000004C         ; Loaded  finalGrid instead of testGrid two because the 
                       result grid is stored in finalGrid when it is found
  122 0000004C         ; the program then continues looking for solutions (chec
                       king the 'uniqueness' of the grid)
  123 0000004C E59F0654        LDR              R0, =finalGrid
  124 00000050 E59F1654        LDR              R1, =testSolutionTwo
  125 00000054 EB00000C        BL               compareGrids
  126 00000058         
  127 00000058 E1A03000        MOV              R3, R0      ;
  128 0000005C         
  129 0000005C         testStageThree
  130 0000005C E59F064C        LDR              R0, =testGridThree
  131 00000060 E3A01000        LDR              R1, =0
  132 00000064 E3A02000        LDR              R2, =0
  133 00000068 E3A0A000        LDR              R10,= 0     ;
  134 0000006C E3A0B000        LDR              R11,= 0     ;
  135 00000070 E92D0C00        STMFD            sp!, {R10, R11}
  136 00000074         ; my sudoku subroutine will search for 2 solutions. Or t
                       ry all of the different solutions (which makes solving 
  137 00000074         ; unique solution grids innefficient). It will return a 
                       boolean value if 2 solutions have been found or not.
  138 00000074         ; this grid does take a lot of time to compute due to th
                       e above reason
  139 00000074 EB0000E2        BL               sudoku      ;sudoku(address, ro
                                                            w, column, Boolean 
                                                            : unique, boolean :
                                                             isNotUnique) //sol
                                                            ve current grid
  140 00000078 E28DD008        ADD              SP, SP, #8  ;
  141 0000007C         ; Loaded  finalGrid instead of testGrid three because th



ARM Macro Assembler    Page 4 


                       e result grid is stored in finalGrid when it is found
  142 0000007C         ; the program then continues looking for solutions (chec
                       king the 'uniqueness' of the grid) 
  143 0000007C E59F0624        LDR              R0, =finalGrid
  144 00000080 E59F162C        LDR              R1, =testSolutionThree
  145 00000084 EB000000        BL               compareGrids
  146 00000088         
  147 00000088         
  148 00000088         
  149 00000088 EAFFFFFE 
                       stop    B                stop
  150 0000008C         
  151 0000008C         
  152 0000008C         compareGrids
  153 0000008C E92D4070        STMFD            sp!, {R4-R6, LR}
  154 00000090 E3A04000        LDR              R4, =0
  155 00000094         forCompareGrids
  156 00000094 E3540051        CMP              R4, #(9*9)
  157 00000098 AA000005        BGE              endForCompareGrids
  158 0000009C E7D05004        LDRB             R5, [R0, R4]
  159 000000A0 E7D16004        LDRB             R6, [R1, R4]
  160 000000A4 E1550006        CMP              R5, R6
  161 000000A8 1A000001        BNE              endForCompareGrids
  162 000000AC E2844001        ADD              R4, R4, #1
  163 000000B0 EAFFFFF7        B                forCompareGrids
  164 000000B4         endForCompareGrids
  165 000000B4         
  166 000000B4 E3540051        CMP              R4,#(9*9)
  167 000000B8 1A000001        BNE              elseCompareGridsFalse
  168 000000BC E3A00001        MOV              R0, #1
  169 000000C0 EA000000        B                endIfCompareGridsTrue
  170 000000C4         elseCompareGridsFalse
  171 000000C4 E3A00000        MOV              R0, #0
  172 000000C8         endIfCompareGridsTrue
  173 000000C8 E8BD8070        LDMFD            sp!, {R4-R6, PC}
  174 000000CC         
  175 000000CC         
  176 000000CC         ; getSquare subroutine
  177 000000CC         ;gets the value of a digit with a given row and column
  178 000000CC         ; Parameters : 
  179 000000CC         ; R0 : address
  180 000000CC         ; R1 : row index
  181 000000CC         ; R2 column index
  182 000000CC         ; R0 digit return value
  183 000000CC         getSquare
  184 000000CC E92D4078        STMFD            sp!, {R3-R6, lr} 
                                                            ; save registers 
  185 000000D0 E1A03000        MOV              R3, R0      ; load address of f
                                                            irst value (base Ad
                                                            dress)
  186 000000D4 E1A04001        MOV              R4, R1      ; save row
  187 000000D8 E1A05002        MOV              R5, R2      ; save col
  188 000000DC         ; accessing value of a 2D array
  189 000000DC E3A06009        LDR              R6,=9       ; tmp = 9 
  190 000000E0 E0060694        MUL              R6, R4, R6  ;  tmp address of v
                                                            alue = tmp * row ( 
                                                            = 9 * row)
  191 000000E4 E0866005        ADD              R6, R6, R5  ; address of value 
                                                            = tmpAddress + col 



ARM Macro Assembler    Page 5 


                                                            + baseAddress
  192 000000E8 E0866003        ADD              R6, R6, R3  ;
  193 000000EC E5D60000        LDRB             R0, [R6]    ; Load Byte value a
                                                            t address
  194 000000F0 E8BD8078        LDMFD            sp!,{R3-R6, pc} 
                                                            ; restore registers
                                                            
  195 000000F4         
  196 000000F4         ; setSquare subroutine
  197 000000F4         ; sets a number value at a column and row index
  198 000000F4         ; Parameters:
  199 000000F4         ; R0 : byte value to store
  200 000000F4         ; R1 : row index
  201 000000F4         ; R2 : column index
  202 000000F4         ; [sp + 4 * nbSaveRegisters] : address
  203 000000F4         setSquare
  204 000000F4 E92D40F8        STMFD            sp!, {R3-R7, lr} 
                                                            ; save registers
  205 000000F8 E59D6018        LDR              R6, [sp, #24] ; load base addre
                                                            ss 
  206 000000FC E1A03000        MOV              R3,R0       ; value
  207 00000100 E1A04001        MOV              R4, R1      ;row
  208 00000104 E1A05002        MOV              R5, R2      ;column
  209 00000108 E3A07009        LDR              R7,=9       ; 
  210 0000010C E0070794        MUL              R7, R4, R7  ; address = 9 * row
                                                             + column + base ad
                                                            dress
  211 00000110 E0877005        ADD              R7, R7, R5  ;  
  212 00000114 E0877006        ADD              R7, R7, R6  ;
  213 00000118 E5C73000        STRB             R3, [R7]    ; store value at [a
                                                            ddress]
  214 0000011C E8BD80F8        LDMFD            sp!,{R3-R7, pc} ; restore regis
                                                            ters 
  215 00000120         
  216 00000120         
  217 00000120         ; isValid subroutine
  218 00000120         ; checks if a grid is (partially) valid or not 
  219 00000120         ; Parameters
  220 00000120         ; R0 : address
  221 00000120         ; R1 : row index
  222 00000120         ; R2 : column index
  223 00000120         ; R0 return value (TRUE or FALSE : 1 or 0)
  224 00000120         isValid
  225 00000120 E92D4078        STMFD            sp!, {R3-R6, lr} 
                                                            ; save registers
  226 00000124 E3A05000        LDR              R5,=0       ;   trueCount = 0
  227 00000128 E1A06000        MOV              R6, R0      ;   address
  228 0000012C E1A03001        MOV              R3, R1      ; row
  229 00000130 E1A04002        MOV              R4, R2      ; column
  230 00000134         ; check if row, column and square is valid
  231 00000134 E1A01003        MOV              R1, R3      ;
  232 00000138 E1A02006        MOV              R2, R6      ; trueCount += chec
                                                            kRow(address, row)
  233 0000013C EB000017        BL               checkRow
  234 00000140 E0855000        ADD              R5, R5, R0  ;  if(trueCount != 
                                                            1) return false
  235 00000144 E3550001        CMP              R5, #1      ;
  236 00000148 1A000010        BNE              returnFalse
  237 0000014C E1A01006        MOV              R1, R6      ;trueCount += check



ARM Macro Assembler    Page 6 


                                                            Row(address, column
                                                            )
  238 00000150 E1A02004        MOV              R2, R4
  239 00000154 EB000030        BL               checkCol
  240 00000158         
  241 00000158 E0855000        ADD              R5, R5, R0  ;  if(trueCount != 
                                                            2) return false
  242 0000015C E3550002        CMP              R5, #2      ;
  243 00000160 1A00000A        BNE              returnFalse
  244 00000164 E1A01003        MOV              R1, R3
  245 00000168 E1A02004        MOV              R2, R4
  246 0000016C E1A00006        MOV              R0, R6      ;
  247 00000170 EB000048        BL               checkSquare ;  trueCount += che
                                                            ckSubGrid(address, 
                                                            row, column)
  248 00000174 E0855000        ADD              R5, R5, R0  ;
  249 00000178         
  250 00000178 E3550003        CMP              R5, #3      ;   if(trueCount !=
                                                             3) return false
  251 0000017C 1A000003        BNE              returnFalse
  252 00000180         ; else { return true;}
  253 00000180 E3A00001        LDR              R0,= 1      ;
  254 00000184 E1A01003        MOV              R1, R3      ;restore row
  255 00000188 E1A02004        MOV              R2, R4      ; restore column  
  256 0000018C E8BD8078        LDMFD            sp!,{R3-R6, pc} 
                                                            ; restore registers
                                                            
  257 00000190         returnFalse
  258 00000190 E1A01003        MOV              R1, R3      ;restore row
  259 00000194 E1A02004        MOV              R2, R4      ; restore column 
  260 00000198 E3A00000        LDR              R0,= 0      ;
  261 0000019C E8BD8078        LDMFD            sp!,{R3-R6, pc} 
                                                            ; restore registers
                                                            
  262 000001A0         
  263 000001A0         
  264 000001A0         ; checkRow subroutine
  265 000001A0         ;gets a row index and checks if that row is valid or not
                       
  266 000001A0         ; Parameters :
  267 000001A0         ; R1 : Row index
  268 000001A0         ; R2 : address
  269 000001A0         ; R0 : boolean output value (1 or 0)
  270 000001A0         checkRow
  271 000001A0 E92D41F8        STMFD            sp!, {R3-R8, lr} 
                                                            ; save registers
  272 000001A4 E1A08002        MOV              R8, R2      ;    address
  273 000001A8 E1A03001        MOV              R3, R1      ; row
  274 000001AC E3A04000        LDR              R4,= 0      ; for(int i = 0; i 
                                                            < length - 1; i++){
                                                            
  275 000001B0         for1
  276 000001B0 E1A01003        MOV              R1, R3      ; value1 = getSquar
                                                            e(Row : row, Column
                                                             : i, address) 
  277 000001B4 E1A02004        MOV              R2, R4      ;
  278 000001B8 E1A00008        MOV              R0, R8      ;
  279 000001BC EBFFFFC2        BL               getSquare
  280 000001C0 E1A05000        MOV              R5, R0      ;



ARM Macro Assembler    Page 7 


  281 000001C4 E1A06004        MOV              R6, R4
  282 000001C8         for2                                 ;   for (int j = i 
                                                            +1; j < length; j++
                                                            ){
  283 000001C8 E2866001        ADD              R6, R6, #1  ;
  284 000001CC E1A01003        MOV              R1, R3      ; value2 = getSquar
                                                            e(Row : row, Column
                                                             : j, address)    
  285 000001D0 E1A02006        MOV              R2, R6      ;
  286 000001D4 E1A00008        MOV              R0, R8      ; 
  287 000001D8 EBFFFFBB        BL               getSquare
  288 000001DC E1A07000        MOV              R7, R0      ;
  289 000001E0         
  290 000001E0 E1550007        CMP              R5, R7      ; if(value 1 == val
                                                            ue 2 && value 1 != 
                                                            0) return false
  291 000001E4 1A000003        BNE              notEqual
  292 000001E8 E3550000        CMP              R5, #0      ;
  293 000001EC 0A000001        BEQ              notEqual
  294 000001F0 E3A00000        LDR              R0,=0       ;
  295 000001F4 E8BD81F8        LDMFD            sp!,{R3-R8, pc} 
                                                            ; restore registers
                                                            
  296 000001F8         notEqual
  297 000001F8         
  298 000001F8 E3560008        CMP              R6, #8      ; }
  299 000001FC 2A000000        BHS              endFor2
  300 00000200 EAFFFFF0        B                for2
  301 00000204         endFor2
  302 00000204         
  303 00000204         
  304 00000204 E2844001        ADD              R4, R4, #1  ;
  305 00000208         ; compares with 8 and not 9 because count is incremented
                        after loading the value at that index
  306 00000208 E3540008        CMP              R4, #8      ;
  307 0000020C 2A000000        BHS              endFor1
  308 00000210 EAFFFFE6        B                for1
  309 00000214         endFor1                              ; }
  310 00000214 E3A00001        LDR              R0,=1       ; returnValue = tru
                                                            e
  311 00000218 E8BD81F8        LDMFD            sp!,{R3-R8, pc} 
                                                            ; restore registers
                                                            
  312 0000021C         
  313 0000021C         
  314 0000021C         ; checkCol subroutine
  315 0000021C         ;gets a Column index and checks if that column is valid 
                       or not
  316 0000021C         ; Parameters :
  317 0000021C         ; R1 : address
  318 0000021C         ; R2 : Column index
  319 0000021C         ; R0 : boolean output value (1 or 0)
  320 0000021C         checkCol
  321 0000021C E92D41F8        STMFD            sp!, {R3-R8, lr} 
                                                            ; save registers
  322 00000220 E1A08001        MOV              R8, R1      ;   address
  323 00000224 E1A03002        MOV              R3, R2      ; column
  324 00000228 E3A04000        LDR              R4,= 0      ; for(int i = 0; i 
                                                            < length - 1; i++){



ARM Macro Assembler    Page 8 


                                                            
  325 0000022C         forCol1
  326 0000022C E1A01004        MOV              R1, R4      ;
  327 00000230 E1A02003        MOV              R2, R3      ;
  328 00000234 E1A00008        MOV              R0, R8      ;  
  329 00000238 EBFFFFA3        BL               getSquare   ; value1 = getSquar
                                                            e(Row : i, Column :
                                                             column, address)
  330 0000023C E1A05000        MOV              R5, R0      ;
  331 00000240 E1A06004        MOV              R6, R4      ;
  332 00000244         forCol2
  333 00000244         ; for (int j = i +1; j < length; j++){
  334 00000244 E2866001        ADD              R6, R6, #1  ;
  335 00000248         
  336 00000248 E1A01006        MOV              R1, R6      ;
  337 0000024C E1A02003        MOV              R2, R3      ;
  338 00000250 E1A00008        MOV              R0, R8      ;  
  339 00000254 EBFFFF9C        BL               getSquare   ;value2 = getSquare
                                                            (Row : j, Column : 
                                                            column, address)
  340 00000258 E1A07000        MOV              R7, R0      ;
  341 0000025C         
  342 0000025C E1550007        CMP              R5, R7      ; if(value 1 == val
                                                            ue 2 && value 1 != 
                                                            0) return false
  343 00000260 1A000003        BNE              notEq2
  344 00000264 E3550000        CMP              R5, #0      ;
  345 00000268 0A000001        BEQ              notEq2
  346 0000026C E3A00000        LDR              R0,=0       ;
  347 00000270 EA000007        B                endForCol1  ; }
  348 00000274         notEq2
  349 00000274 E3560008        CMP              R6, #8      ;
  350 00000278 2A000000        BHS              endForCol2
  351 0000027C EAFFFFF0        B                forCol2
  352 00000280         endForCol2
  353 00000280         
  354 00000280 E2844001        ADD              R4, R4, #1  ; 
  355 00000284 E3A00001        LDR              R0,=1       ; returnValue = tru
                                                            e (was changed by s
                                                            ubroutine getSquare
                                                            )
  356 00000288         ; compares with 8 and not 9 because count is incremented
                        after loading the value at that index
  357 00000288 E3540008        CMP              R4, #8      ;
  358 0000028C 2A000000        BHS              endForCol1
  359 00000290 EAFFFFE5        B                forCol1     ; }
  360 00000294         ; return true
  361 00000294         endForCol1
  362 00000294 E8BD81F8        LDMFD            sp!,{R3-R8, pc} 
                                                            ; restore registers
                                                            
  363 00000298         
  364 00000298         
  365 00000298         ; checkSquare subroutine
  366 00000298         ;gets a row and a column index and checks if the square 
                       it is positionned in is valid or not
  367 00000298         ; Parameters :
  368 00000298         ;  R0 : address
  369 00000298         ; R1 : Row index



ARM Macro Assembler    Page 9 


  370 00000298         ; R2 : Column index
  371 00000298         ; R0 : boolean output value (1 or 0)
  372 00000298         checkSquare
  373 00000298 E92D4FF8        STMFD            sp!, {R3-R11, lr} 
                                                            ; save registers
  374 0000029C E1A0B000        MOV              R11, R0     ;address
  375 000002A0 E1A03001        MOV              R3, R1      ; row 
  376 000002A4 E1A04002        MOV              R4, R2      ; column
  377 000002A8         ; getting the indexes to point at the top left of each s
                       ub-square 
  378 000002A8 E3530000        CMP              R3, #0      ; if(row == 0 || ro
                                                            w == 3 || row == 6)
                                                             row = row
  379 000002AC 0A000013        BEQ              endRowCheck
  380 000002B0 E3530003        CMP              R3, #3      ;
  381 000002B4 0A000011        BEQ              endRowCheck
  382 000002B8 E3530006        CMP              R3, #6      ;
  383 000002BC 0A00000F        BEQ              endRowCheck
  384 000002C0         
  385 000002C0 E3530001        CMP              R3, #1      ; else if(row ==1 |
                                                            | row == 4 || row =
                                                            =7) row = row -1
  386 000002C4 0A000009        BEQ              rowInPos2
  387 000002C8 E3530004        CMP              R3, #4      ;
  388 000002CC 0A000007        BEQ              rowInPos2
  389 000002D0 E3530007        CMP              R3, #7      ;
  390 000002D4 0A000005        BEQ              rowInPos2
  391 000002D8         
  392 000002D8 E3530002        CMP              R3, #2      ; else if( row == 2
                                                             || row ==5 || row 
                                                            == 8) row = row - 2
                                                            
  393 000002DC 0A000005        BEQ              rowInPos3
  394 000002E0 E3530005        CMP              R3, #5      ;
  395 000002E4 0A000003        BEQ              rowInPos3
  396 000002E8 E3530008        CMP              R3, #8      ;
  397 000002EC 0A000001        BEQ              rowInPos3
  398 000002F0         
  399 000002F0         rowInPos2
  400 000002F0 E2433001        SUB              R3, R3, #1  ;
  401 000002F4 EA000001        B                endRowCheck
  402 000002F8         
  403 000002F8         rowInPos3
  404 000002F8 E2433002        SUB              R3, R3, #2  ;
  405 000002FC EAFFFFFF        B                endRowCheck
  406 00000300         
  407 00000300         endRowCheck
  408 00000300 E3540000        CMP              R4, #0      ;if(column == 0 || 
                                                            column == 3 || colu
                                                            mn == 6) column = c
                                                            olumn
  409 00000304 0A000013        BEQ              endColCheck
  410 00000308 E3540003        CMP              R4, #3      ;
  411 0000030C 0A000011        BEQ              endColCheck
  412 00000310 E3540006        CMP              R4, #6      ;
  413 00000314 0A00000F        BEQ              endColCheck
  414 00000318         
  415 00000318 E3540001        CMP              R4, #1      ;if(column == 1 || 
                                                            column == 4 || colu



ARM Macro Assembler    Page 10 


                                                            mn == 7) column = c
                                                            olumn - 1
  416 0000031C 0A000009        BEQ              colInPos2
  417 00000320 E3540004        CMP              R4, #4      ;
  418 00000324 0A000007        BEQ              colInPos2
  419 00000328 E3540007        CMP              R4, #7      ;
  420 0000032C 0A000005        BEQ              colInPos2
  421 00000330         
  422 00000330 E3540002        CMP              R4, #2      ;if(column == 2 || 
                                                            column == 5 || colu
                                                            mn == 8) column = c
                                                            olumn - 8
  423 00000334 0A000005        BEQ              colInPos3
  424 00000338 E3540005        CMP              R4, #5      ;
  425 0000033C 0A000003        BEQ              colInPos3
  426 00000340 E3540008        CMP              R4, #8      ;
  427 00000344 0A000001        BEQ              colInPos3
  428 00000348         
  429 00000348         colInPos2
  430 00000348 E2444001        SUB              R4, R4, #1  ;
  431 0000034C EA000001        B                endColCheck
  432 00000350         
  433 00000350         colInPos3
  434 00000350 E2444002        SUB              R4, R4, #2  ;
  435 00000354 EAFFFFFF        B                endColCheck
  436 00000358         
  437 00000358         endColCheck
  438 00000358         ; storing all of the 9 values of the sub-square on the s
                       ystem stack for ease of comparison
  439 00000358 E3A05000        LDR              R5,= 0      ;
  440 0000035C         forLoopPushValuesOnStack
  441 0000035C E3550003        CMP              R5, #3      ; for(int i = 0; i 
                                                            < 3; i++){
  442 00000360 2A000010        BHS              endPushValues
  443 00000364         
  444 00000364 E1A01003        MOV              R1, R3      ; value1 = getSquar
                                                            e(Row : row, Column
                                                             : i, address)
  445 00000368 E1A02004        MOV              R2, R4
  446 0000036C E0822005        ADD              R2, R2, R5
  447 00000370 E1A0000B        MOV              R0, R11     ;  
  448 00000374 EBFFFF54        BL               getSquare
  449 00000378 E1A07000        MOV              R7, R0      ;
  450 0000037C E2811001        ADD              R1, R1, #1  ;value2 = getSquare
                                                            (Row : row+1, Colum
                                                            n : i, address)
  451 00000380 E1A0000B        MOV              R0, R11     ;  
  452 00000384 EBFFFF50        BL               getSquare
  453 00000388 E1A08000        MOV              R8, R0      ;
  454 0000038C E2811001        ADD              R1, R1, #1  ;
  455 00000390 E1A0000B        MOV              R0, R11     ;   
  456 00000394 EBFFFF4C        BL               getSquare   ; value3 = getSquar
                                                            e(Row : row+2, Colu
                                                            mn : i, address)
  457 00000398 E1A09000        MOV              R9, R0      ;
  458 0000039C E92D0380        STMFD            sp!, {R7-R9} ; push value1,valu
                                                            e2 and value3 on sy
                                                            stem stack
  459 000003A0 E2855001        ADD              R5, R5, #1  ;



ARM Macro Assembler    Page 11 


  460 000003A4 EAFFFFEC        B                forLoopPushValuesOnStack
  461 000003A8         endPushValues                        ;  }
  462 000003A8 E3A00001        LDR              R0,= 1      ; tmpReturnValue = 
                                                            true
  463 000003AC E3A03000        LDR              R3,= 0      ;
  464 000003B0         forFirstForLoop
  465 000003B0 E3530008        CMP              R3, #8      ; for(int i = 0; i 
                                                            < 8; i++){
  466 000003B4 2A000010        BHS              endFirstForLoop
  467 000003B8         
  468 000003B8 E79D6103        LDR              R6, [sp, R3, LSL #2] ; value1 =
                                                             sp + i * 4
  469 000003BC E1A04003        MOV              R4, R3      ;
  470 000003C0         
  471 000003C0 E3560000        CMP              R6, #0      ; for(int j = i+1; 
                                                            j < 9; i++){
  472 000003C4 0A00000A        BEQ              endSecondForLoop
  473 000003C8         
  474 000003C8         forSecondForLoop
  475 000003C8 E2844001        ADD              R4, R4, #1  ;
  476 000003CC E3540009        CMP              R4, #9      ;
  477 000003D0 2A000007        BHS              endSecondForLoop
  478 000003D4         
  479 000003D4 E79D7104        LDR              R7, [sp, R4, LSL #2] ; value2 =
                                                             sp + j * 4
  480 000003D8         
  481 000003D8 E1560007        CMP              R6, R7      ; if(value 1 == val
                                                            ue2 && value1 != 0)
                                                             return false
  482 000003DC 1A000003        BNE              notEqualForLoops
  483 000003E0 E3560000        CMP              R6, #0      ;
  484 000003E4 0A000001        BEQ              notEqualForLoops
  485 000003E8 E3A00000        LDR              R0,=0       ;
  486 000003EC EA000002        B                endFirstForLoop
  487 000003F0         notEqualForLoops
  488 000003F0         
  489 000003F0 EAFFFFF4        B                forSecondForLoop ; }
  490 000003F4         endSecondForLoop
  491 000003F4 E2833001        ADD              R3, R3, #1  ;
  492 000003F8 EAFFFFEC        B                forFirstForLoop
  493 000003FC         endFirstForLoop                      ;  }
  494 000003FC E28DD024        ADD              sp, sp, #36 ; pop 9 pushed valu
                                                            es (9 * 4)
  495 00000400 E8BD8FF8        LDMFD            sp!,{R3-R11, pc} ;  restore reg
                                                            isters
  496 00000404         
  497 00000404         ; sudoku subroutine
  498 00000404         ;automatically fills the sudoku grid using 'brute force'
                       , 
  499 00000404         ;returns if the grid has compeletely been filled or if t
                       he grid is not solvable
  500 00000404         ; Paramteres : 
  501 00000404         ;  R0 : address
  502 00000404         ; R1 : Row
  503 00000404         ; R2 : Column
  504 00000404         ; [sp + (number of saved registers + 1 * 4)] : unique (b
                       oolean) (also returned (but saved in R1) as it is necess
                       ary to determine which text String to display)
  505 00000404         ; [sp + (number of saved registers + 1 * 4) + 4] : isNot



ARM Macro Assembler    Page 12 


                       Unique (boolean)
  506 00000404         ; R0 : return boolean value(result)
  507 00000404         ; R1 : return (unique)
  508 00000404         ; note : here the number of registers saved is 10 (11 wi
                       th LR) so 11*4 = 44
  509 00000404         ; we then have [sp + 44] and [sp + 48]
  510 00000404         sudoku
  511 00000404 E92D5FF8        STMFD            sp!, {R3-R12, lr} 
                                                            ; save registers
  512 00000408 E1A0C000        MOV              R12, R0     ; address
  513 0000040C E59DB02C        LDR              R11, [sp, #44] ; unique
  514 00000410 E59DA030        LDR              R10, [sp, #48] ; isNotUnique
  515 00000414         
  516 00000414 E3A00000        LDR              R0,= 0      ; result = false;
  517 00000418 E1A03001        MOV              R3, R1      ;row
  518 0000041C E1A04002        MOV              R4, R2      ;column
  519 00000420         
  520 00000420 E1A05003        MOV              R5, R3      ; nxtrow = row
  521 00000424 E1A06004        MOV              R6, R4      ; nxtcol = col + 1
  522 00000428 E2866001        ADD              R6, R6, #1  ;
  523 0000042C         
  524 0000042C E3560008        CMP              R6, #8      ; if (nxtcol > 8 ) 
                                                            {
  525 00000430 9A000001        BLS              endIfResetnxtCol
  526 00000434 E3A06000        LDR              R6,= 0      ; nxtcol = 0
  527 00000438 E2855001        ADD              R5, R5, #1  ; nxtrow++ }
  528 0000043C         endIfResetnxtCol
  529 0000043C         
  530 0000043C E1A01003        MOV              R1, R3      ;
  531 00000440 E1A02004        MOV              R2, R4      ;
  532 00000444 E1A0000C        MOV              R0, R12     ;   
  533 00000448 EBFFFF1F        BL               getSquare
  534 0000044C E1A07000        MOV              R7, R0      ; value = getSquare
                                                            (Row : row, Column 
                                                            : col, address)
  535 00000450 E3A00000        LDR              R0,= 0      ; result = false; (
                                                            as overwritten by g
                                                            etSquare subroutine
                                                            )
  536 00000454 E3570000        CMP              R7, #0      ; if(value != 0){
  537 00000458 0A000012        BEQ              skipNonZero
  538 0000045C         
  539 0000045C E3530008        CMP              R3, #8      ; if(row == 8 && co
                                                            l == 8) return true
                                                            ;
  540 00000460 1A000003        BNE              notLastSquare
  541 00000464 E3540008        CMP              R4, #8      ;
  542 00000468 1A000001        BNE              notLastSquare
  543 0000046C E3A00001        LDR              R0,= 1      ;
  544 00000470 EA000046        B                returnSudokuSubroutine
  545 00000474         notLastSquare
  546 00000474 E1A01005        MOV              R1, R5      ; else {
  547 00000478 E1A02006        MOV              R2, R6      ; 
  548 0000047C E92D0C00        STMFD            sp!, {R10, R11} ; push paramete
                                                            rs unique and isNot
                                                            Unique on sp
  549 00000480 E1A0000C        MOV              R0, R12     ;    
  550 00000484 EBFFFFDE        BL               sudoku      ;result = sudoku(Ro
                                                            w : nxtRow, Column 



ARM Macro Assembler    Page 13 


                                                            = nxtcol, address, 
                                                            unique, isNotUnique
                                                            )
  551 00000488 E8BD0C00        LDMFD            sp!,{R10, R11} ;  restores the 
                                                            two (updated) param
                                                            eter registers
  552 0000048C E3500001        CMP              R0, #1      ; if(result && uniq
                                                            ue){
  553 00000490 1A000003        BNE              dontreturn
  554 00000494 E35A0001        CMP              R10, #1
  555 00000498 1A000001        BNE              dontreturn  ;  
  556 0000049C E3A0A000        LDR              R10,= 0     ; unique = false 
  557 000004A0 EA00003A        B                returnSudokuSubroutine 
                                                            ; return true  }
  558 000004A4         dontreturn
  559 000004A4         
  560 000004A4 EA000039        B                returnSudokuSubroutine ; }
  561 000004A8         skipNonZero                          ; } else {
  562 000004A8 E3A08001        LDR              R8,= 1      ; for(byte i = 1; i
                                                             <= 9 && !result; i
                                                            ++){
  563 000004AC         forLoopTry
  564 000004AC E3580009        CMP              R8, #9
  565 000004B0 8A00002E        BHI              endForLoopTry
  566 000004B4 E3500001        CMP              R0, #1      ;
  567 000004B8 0A00002C        BEQ              endForLoopTry
  568 000004BC E1A00008        MOV              R0, R8      ;
  569 000004C0         
  570 000004C0 E1A01003        MOV              R1, R3      ;
  571 000004C4 E1A02004        MOV              R2, R4      ;
  572 000004C8 E52DC004        STR              R12, [sp, #-4]! ; pushing addre
                                                            ss on system stack 
                                                            (passing as paramet
                                                            er)
  573 000004CC EBFFFF08        BL               setSquare   ; setSquare(Row : r
                                                            ow, Column : col, V
                                                            alue : i, address)
  574 000004D0 E28DD004        ADD              SP, SP, #4  ; pop value off sta
                                                            ck
  575 000004D4 E1A01003        MOV              R1, R3      ;
  576 000004D8 E1A02004        MOV              R2, R4      ;
  577 000004DC E1A0000C        MOV              R0, R12     ;     
  578 000004E0 EBFFFF0E        BL               isValid     ; 
  579 000004E4 E1A09000        MOV              R9, R0      ; isValidResult = i
                                                            sValid(Row : row, C
                                                            olumn : col, addres
                                                            s)
  580 000004E8 E3A00000        LDR              R0,= 0      ; result = false (o
                                                            verwritten by subro
                                                            utine)
  581 000004EC E3590001        CMP              R9, #1      ; if(isValidResult)
                                                            {
  582 000004F0 1A00001C        BNE              squareNotValid
  583 000004F4         
  584 000004F4 E3530008        CMP              R3, #8      ; if(row == 8 && co
                                                            l == 8) return true
                                                            ;
  585 000004F8 1A000003        BNE              notLastSquare2
  586 000004FC E3540008        CMP              R4, #8      ;



ARM Macro Assembler    Page 14 


  587 00000500 1A000001        BNE              notLastSquare2
  588 00000504 E3A00001        LDR              R0,= 1      ;
  589 00000508 EA000020        B                returnSudokuSubroutine
  590 0000050C         notLastSquare2
  591 0000050C E1A01005        MOV              R1, R5      ; else {
  592 00000510 E1A0000C        MOV              R0, R12     ;     
  593 00000514 E1A02006        MOV              R2, R6      ; result = sudoku(R
                                                            ow : nxtRow, Column
                                                             = nxtcol, address)
                                                            
  594 00000518 E92D0C00        STMFD            sp!, {R10, R11} ; push paramete
                                                            rs unique and uniqu
                                                            eHasBeenChangedTwic
                                                            e on sp
  595 0000051C EBFFFFB8        BL               sudoku      ;result = sudoku(Ro
                                                            w : nxtRow, Column 
                                                            = nxtcol, address, 
                                                            unique, isNotUnique
                                                            )
  596 00000520 E8BD0C00        LDMFD            sp!,{R10, R11} ;restores the tw
                                                            o (updated) paramet
                                                            er registers
  597 00000524 E35B0000        CMP              R11, #0     ; if(!uniqueHasBeen
                                                            ChangedTwice){
  598 00000528 1A00000E        BNE              squareNotValid
  599 0000052C         
  600 0000052C E3500001        CMP              R0, #1      ;if(result){
  601 00000530 1A00000C        BNE              squareNotValid
  602 00000534 E35A0000        CMP              R10, #0     ;  if(!isNotUnique)
                                                            {
  603 00000538 1A000004        BNE              alreadyUnique ; isNotUnique = t
                                                            rue;
  604 0000053C E3A0A001        LDR              R10,= 1     ;  result = false
  605 00000540 E3A00000        LDR              R0,= 0      ;   
  606 00000544 E1A0100C        MOV              R1, R12     ; copy_grid_to_fina
                                                            l_display_grid(curr
                                                            entGrid)
  607 00000548 EB000049        BL               copy_grid_into_grid_to_display 
                                                            ; copy current grid
                                                             into grid to displ
                                                            ay for result
  608 0000054C EA000005        B                squareNotValid ; }
  609 00000550         alreadyUnique
  610 00000550 E35A0001        CMP              R10, #1     ; else if(unique){
  611 00000554 1A000003        BNE              squareNotValid
  612 00000558 E3A00001        LDR              R0,= 1      ;  unique = false;
  613 0000055C E3A0A000        LDR              R10,= 0     ; uniqueHasBeenChan
                                                            gedTwice = true
  614 00000560 E3A0B001        LDR              R11,= 1     ; return true;
  615 00000564 EA000009        B                returnSudokuSubroutine
  616 00000568         notUniqueAnymore                     ; }
  617 00000568         ;}
  618 00000568         squareNotValid                       ;  }
  619 00000568 E2888001        ADD              R8, R8, #1  ;
  620 0000056C EAFFFFCE        B                forLoopTry
  621 00000570         endForLoopTry                        ; }
  622 00000570         
  623 00000570 E3500000        CMP              R0, #0      ; if(!result){
  624 00000574 1A000005        BNE              returnSudokuSubroutine



ARM Macro Assembler    Page 15 


  625 00000578         
  626 00000578 E1A01003        MOV              R1, R3      ;
  627 0000057C E1A02004        MOV              R2, R4      ;
  628 00000580 E3A00000        LDR              R0,= 0      ;  
  629 00000584 E52DC004        STR              R12, [sp, #-4]! ; push address 
                                                            on stack (parameter
                                                            )
  630 00000588         
  631 00000588 EBFFFED9        BL               setSquare   ; setSquare(Row : r
                                                            ow, Column : col, V
                                                            alue : i, address)
  632 0000058C E28DD004        ADD              SP, SP, #4  ; pop value off sta
                                                            ck     ;  }
  633 00000590         returnSudokuSubroutine
  634 00000590 E35B0000        CMP              R11, #0     ; if(!isNotUnique &
                                                            & unique){
  635 00000594 1A000005        BNE              hasBeenSet  ; 
  636 00000598 E35A0000        CMP              R10, #0     ;
  637 0000059C 1A000003        BNE              hasBeenSet
  638 000005A0 E1A04000        MOV              R4, R0      ;  tmpResult = resu
                                                            lt
  639 000005A4 E1A0100C        MOV              R1, R12     ; copy_grid_to_fina
                                                            l_display_grid(curr
                                                            entGrid)
  640 000005A8 EB000031        BL               copy_grid_into_grid_to_display 
                                                            ; copy current grid
                                                             into grid to displ
                                                            ay for result
  641 000005AC E1A00004        MOV              R0, R4      ;  result = tmpResu
                                                            lt
  642 000005B0         hasBeenSet                           ; }
  643 000005B0 E1A0100A        MOV              R1, R10     ; return : R0 (resu
                                                            lt) R1 (uniqueSolut
                                                            ion)
  644 000005B4 E58DB02C        STR              R11, [sp, #44] ; update unique 
                                                            and isNotUnique val
                                                            ues in the system s
                                                            tack
  645 000005B8 E58DA030        STR              R10, [sp, #48] ; 
  646 000005BC E8BD9FF8        LDMFD            sp!,{R3-R12, pc} ;  restore reg
                                                            isters
  647 000005C0         
  648 000005C0         
  649 000005C0         ; printGrid subroutine
  650 000005C0         ;prints the current sudoku grid
  651 000005C0         ; Parameters : 
  652 000005C0         ; R1 : address
  653 000005C0         printGrid
  654 000005C0 E92D4018        STMFD            sp!, {R3-R4, lr} 
                                                            ; save registers
  655 000005C4 E1A04001        MOV              R4, R1      ; address
  656 000005C8 E3A03000        LDR              R3,= 0      ; row = 0;
  657 000005CC         forLoopPrint
  658 000005CC E3530009        CMP              R3, #9      ; for(int row = 0; 
                                                            row < 9; row++){
  659 000005D0 2A000006        BHS              stopForPrint
  660 000005D4 E1A01003        MOV              R1, R3      ;
  661 000005D8 E1A02004        MOV              R2, R4      ;
  662 000005DC EB000006        BL               printRow    ; printRow(row, add



ARM Macro Assembler    Page 16 


                                                            ress)
  663 000005E0 E3A0000A        MOV              R0, #10     ; print(next line)
  664 000005E4 EBFFFFFE        BL               sendchar
  665 000005E8 E2833001        ADD              R3, R3, #1  ;
  666 000005EC EAFFFFF6        B                forLoopPrint
  667 000005F0         stopForPrint                         ;}
  668 000005F0 E3A0000A        LDR              R0,= 10     ;   print(next line
                                                            )
  669 000005F4 EBFFFFFE        BL               sendchar
  670 000005F8 E8BD8018        LDMFD            sp!,{R3-R4, pc} ;  restore regi
                                                            sters
  671 000005FC         
  672 000005FC         ; printRow subroutine
  673 000005FC         ;prints the current row in the console
  674 000005FC         ; Parameters :
  675 000005FC         ; R1 : row index
  676 000005FC         ; R2 : Address
  677 000005FC         printRow
  678 000005FC E92D4078        STMFD            sp!, {R3-R6, lr} 
                                                            ; save registers
  679 00000600 E1A03001        MOV              R3, R1      ; row
  680 00000604 E1A05002        MOV              R5, R2      ; base Address
  681 00000608 E3A06009        LDR              R6,= 9      ;
  682 0000060C E0060693        MUL              R6, R3, R6  ;
  683 00000610 E0855006        ADD              R5, R5, R6  ;firstAddressOfRow 
                                                            = baseAddress + 9 *
                                                             rowIndex
  684 00000614 E3A04000        LDR              R4,= 0      ; row = 0;
  685 00000618         forColPrint
  686 00000618 E3540009        CMP              R4, #9      ; for(int i = 0; i 
                                                            < 9; i++){
  687 0000061C 2A000006        BHS              stopRowPrint
  688 00000620 E7D56004        LDRB             R6, [R5, R4] ; value = memory.b
                                                            yte[firstAddressOfR
                                                            ow + i]
  689 00000624 E2860030        ADD              R0, R6, #'0' ; value += '0' //c
                                                            onverting to ascii 
                                                            value
  690 00000628 EBFFFFFE        BL               sendchar    ;;  print(value)
  691 0000062C E3A00020        LDR              R0,= 32     ;  print(' ')
  692 00000630 EBFFFFFE        BL               sendchar
  693 00000634 E2844001        ADD              R4, R4, #1  ; }
  694 00000638 EAFFFFF6        B                forColPrint
  695 0000063C         stopRowPrint
  696 0000063C E8BD8078        LDMFD            sp!,{R3-R6, pc} ;  restore regi
                                                            sters
  697 00000640         
  698 00000640         
  699 00000640         ;displayText subroutine 
  700 00000640         ; displays a null terminated string of characters into t
                       he console
  701 00000640         ; Parameters : 
  702 00000640         ; R1 : address of first char to display
  703 00000640         displayText
  704 00000640 E92D4038        STMFD            sp!, {R3-R5, lr} 
                                                            ; save registers
  705 00000644 E1A03001        MOV              R3, R1      ; address
  706 00000648 E3A04000        LDR              R4,= 0      ; i = 0
  707 0000064C         displayCharacters                    ;  char = 1 (to get



ARM Macro Assembler    Page 17 


                                                             into while loop at
                                                             the start) 
  708 0000064C E7D35004        LDRB             R5, [R3, R4] ; while(char != 0)
                                                            
  709 00000650 E3550000        CMP              R5, #0      ;   char = memory.b
                                                            yte[address+i]
  710 00000654 0A000003        BEQ              stopReading ; print(char)
  711 00000658 E1A00005        MOV              R0, R5      ;   }
  712 0000065C EBFFFFFE        BL               sendchar    ;}
  713 00000660 E2844001        ADD              R4, R4, #1  ;
  714 00000664 EAFFFFF8        B                displayCharacters
  715 00000668         stopReading
  716 00000668 E3A0000A        LDR              R0,=10      ;   print(new line)
                                                            
  717 0000066C EBFFFFFE        BL               sendchar
  718 00000670 E8BD8038        LDMFD            sp!,{R3-R5,pc} ;  restore regis
                                                            ters
  719 00000674         
  720 00000674         ;copy_grid_into_grid_to_display subroutine 
  721 00000674         ; copies a given grid into the grid used to print the fi
                       nal (solved) grid
  722 00000674         ; Parameters : 
  723 00000674         ; R1 : address of grid to copy
  724 00000674         copy_grid_into_grid_to_display
  725 00000674 E92D4078        STMFD            sp!, {R3-R6, lr} 
                                                            ; save registers 
  726 00000678 E1A03001        MOV              R3, R1      ; address of grid t
                                                            o copy
  727 0000067C E59F6024        LDR              R6,= finalGrid ;  address of gr
                                                            id to fill
  728 00000680 E3A04000        LDR              R4,= 0      ;
  729 00000684         copyNextValueForLoop
  730 00000684 E3540051        CMP              R4, #81     ;for(int i =0; i < 
                                                            9*9; i++){
  731 00000688 2A000003        BHS              endCopy
  732 0000068C E7D35004        LDRB             R5, [R3, R4] ; value = memory.b
                                                            yte[originalgrid ba
                                                            se address + i]
  733 00000690 E7C65004        STRB             R5, [R6, R4] ; memory.byte[grid
                                                            ToFill base address
                                                             + i] = value
  734 00000694 E2844001        ADD              R4, R4, #1  ;  }
  735 00000698 EAFFFFF9        B                copyNextValueForLoop
  736 0000069C         endCopy
  737 0000069C E8BD8078        LDMFD            sp!,{R3-R6,pc} ;  restore regis
                                                            ters
  738 000006A0 00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000         AREA             Grids, DATA, READWRITE
  739 00000000         
  740 00000000         ;to use a grid change its name to "loadGrid" (or change 
                       the addresses loaded in the mainline)
  741 00000000         
  742 00000000         ;final grid is used to keep track of the final grid to d



ARM Macro Assembler    Page 18 


                       isplay as the program finds wheter
  743 00000000         ;the grid has a unique solution or not
  744 00000000         finalGrid
  745 00000000 00 00 00 
              00 00 00 
              00 00 00         DCB              0,0,0,0,0,0,0,0,0
  746 00000009 00 00 00 
              00 00 00 
              00 00 00         DCB              0,0,0,0,0,0,0,0,0
  747 00000012 00 00 00 
              00 00 00 
              00 00 00         DCB              0,0,0,0,0,0,0,0,0
  748 0000001B 00 00 00 
              00 00 00 
              00 00 00         DCB              0,0,0,0,0,0,0,0,0
  749 00000024 00 00 00 
              00 00 00 
              00 00 00         DCB              0,0,0,0,0,0,0,0,0
  750 0000002D 00 00 00 
              00 00 00 
              00 00 00         DCB              0,0,0,0,0,0,0,0,0
  751 00000036 00 00 00 
              00 00 00 
              00 00 00         DCB              0,0,0,0,0,0,0,0,0
  752 0000003F 00 00 00 
              00 00 00 
              00 00 00         DCB              0,0,0,0,0,0,0,0,0
  753 00000048 00 00 00 
              00 00 00 
              00 00 00         DCB              0,0,0,0,0,0,0,0,0
  754 00000051         
  755 00000051         ;this grid has multiple solutions
  756 00000051         multiSolutionGrid
  757 00000051 00 00 00 
              00 00 01 
              04 00 00         DCB              0,0,0,0,0,1,4,0,0
  758 0000005A 03 00 00 
              00 00 07 
              08 00 05         DCB              3,0,0,0,0,7,8,0,5
  759 00000063 07 09 00 
              06 00 00 
              00 01 00         DCB              7,9,0,6,0,0,0,1,0
  760 0000006C 08 00 00 
              00 00 00 
              02 05 00         DCB              8,0,0,0,0,0,2,5,0
  761 00000075 00 00 00 
              00 00 00 
              00 00 00         DCB              0,0,0,0,0,0,0,0,0
  762 0000007E 00 00 03 
              07 00 00 
              00 00 06         DCB              0,0,3,7,0,0,0,0,6
  763 00000087 00 02 00 
              00 00 06 
              00 03 08         DCB              0,2,0,0,0,6,0,3,8
  764 00000090 05 00 08 
              09 00 00 
              00 00 01         DCB              5,0,8,9,0,0,0,0,1
  765 00000099 00 00 09 
              03 00 00 



ARM Macro Assembler    Page 19 


              00 00 00         DCB              0,0,9,3,0,0,0,0,0
  766 000000A2         
  767 000000A2         ;this grid has a unique solution
  768 000000A2         uniqueSolutionGrid
  769 000000A2 00 01 09 
              08 00 00 
              00 00 06         DCB              0,1,9,8,0,0,0,0,6
  770 000000AB 08 00 00 
              00 06 00 
              00 00 00         DCB              8,0,0,0,6,0,0,0,0
  771 000000B4 00 00 06 
              03 00 00 
              00 08 02         DCB              0,0,6,3,0,0,0,8,2
  772 000000BD 00 00 01 
              09 00 00 
              00 06 05         DCB              0,0,1,9,0,0,0,6,5
  773 000000C6 00 00 04 
              06 05 00 
              01 00 00         DCB              0,0,4,6,5,0,1,0,0
  774 000000CF 05 06 00 
              00 00 08 
              03 00 00         DCB              5,6,0,0,0,8,3,0,0
  775 000000D8 06 04 00 
              00 00 07 
              00 00 00         DCB              6,4,0,0,0,7,0,0,0
  776 000000E1 00 00 00 
              00 03 00 
              06 00 04         DCB              0,0,0,0,3,0,6,0,4
  777 000000EA 00 00 00 
              00 00 06 
              09 07 00         DCB              0,0,0,0,0,6,9,7,0
  778 000000F3         
  779 000000F3         ;provided grids
  780 000000F3         ;to use a grid change its name to "loadGrid" (& remember
                        to change the previous grid's name)
  781 000000F3         
  782 000000F3         testGridOne
  783 000000F3 00 00 00 
              00 00 05 
              06 07 00         DCB              0,0,0,0,0,5,6,7,0
  784 000000FC 00 02 03 
              00 00 00 
              00 00 00         DCB              0,2,3,0,0,0,0,0,0
  785 00000105 00 04 00 
              00 00 00 
              00 00 00         DCB              0,4,0,0,0,0,0,0,0
  786 0000010E 00 00 00 
              00 00 00 
              00 00 00         DCB              0,0,0,0,0,0,0,0,0
  787 00000117 00 00 00 
              00 00 00 
              00 00 00         DCB              0,0,0,0,0,0,0,0,0
  788 00000120 00 00 00 
              00 00 00 
              00 00 00         DCB              0,0,0,0,0,0,0,0,0
  789 00000129 00 00 00 
              00 00 00 
              00 00 00         DCB              0,0,0,0,0,0,0,0,0
  790 00000132 08 00 00 



ARM Macro Assembler    Page 20 


              00 00 00 
              00 00 00         DCB              8,0,0,0,0,0,0,0,0
  791 0000013B 09 00 00 
              00 00 00 
              00 00 00         DCB              9,0,0,0,0,0,0,0,0
  792 00000144         
  793 00000144         testGridTwo
  794 00000144 00 02 07 
              06 00 00 
              00 00 03         DCB              0,2,7,6,0,0,0,0,3
  795 0000014D 03 00 00 
              00 00 09 
              00 00 00         DCB              3,0,0,0,0,9,0,0,0
  796 00000156 08 00 00 
              00 04 00 
              05 00 00         DCB              8,0,0,0,4,0,5,0,0
  797 0000015F 06 00 00 
              00 00 02 
              00 04 00         DCB              6,0,0,0,0,2,0,4,0
  798 00000168 00 00 02 
              00 00 00 
              08 00 00         DCB              0,0,2,0,0,0,8,0,0
  799 00000171 00 04 00 
              07 00 00 
              00 00 01         DCB              0,4,0,7,0,0,0,0,1
  800 0000017A 00 00 03 
              00 01 00 
              00 00 07         DCB              0,0,3,0,1,0,0,0,7
  801 00000183 00 00 00 
              08 00 00 
              00 00 09         DCB              0,0,0,8,0,0,0,0,9
  802 0000018C 09 00 00 
              00 00 06 
              02 08 00         DCB              9,0,0,0,0,6,2,8,0
  803 00000195         
  804 00000195         testSolutionTwo
  805 00000195 01 02 07 
              06 05 08 
              04 09 03         DCB              1,2,7,6,5,8,4,9,3
  806 0000019E 03 05 04 
              02 07 09 
              01 06 08         DCB              3,5,4,2,7,9,1,6,8
  807 000001A7 08 09 06 
              03 04 01 
              05 07 02         DCB              8,9,6,3,4,1,5,7,2
  808 000001B0 06 03 09 
              01 08 02 
              07 04 05         DCB              6,3,9,1,8,2,7,4,5
  809 000001B9 07 01 02 
              04 09 05 
              08 03 06         DCB              7,1,2,4,9,5,8,3,6
  810 000001C2 05 04 08 
              07 06 03 
              09 02 01         DCB              5,4,8,7,6,3,9,2,1
  811 000001CB 02 08 03 
              09 01 04 
              06 05 07         DCB              2,8,3,9,1,4,6,5,7
  812 000001D4 04 06 05 
              08 02 07 



ARM Macro Assembler    Page 21 


              03 01 09         DCB              4,6,5,8,2,7,3,1,9
  813 000001DD 09 07 01 
              05 03 06 
              02 08 04         DCB              9,7,1,5,3,6,2,8,4
  814 000001E6         
  815 000001E6         testGridThree
  816 000001E6 00 00 00 
              09 00 00 
              00 05 00         DCB              0,0,0,9,0,0,0,5,0
  817 000001EF 00 00 03 
              00 04 00 
              01 00 06         DCB              0,0,3,0,4,0,1,0,6
  818 000001F8 00 04 00 
              02 00 00 
              00 08 00         DCB              0,4,0,2,0,0,0,8,0
  819 00000201 07 00 08 
              00 00 00 
              00 00 00         DCB              7,0,8,0,0,0,0,0,0
  820 0000020A 00 03 00 
              00 00 00 
              00 06 00         DCB              0,3,0,0,0,0,0,6,0
  821 00000213 00 00 00 
              00 00 00 
              05 00 04         DCB              0,0,0,0,0,0,5,0,4
  822 0000021C 00 06 00 
              00 00 01 
              00 07 00         DCB              0,6,0,0,0,1,0,7,0
  823 00000225 04 00 02 
              00 05 00 
              03 00 00         DCB              4,0,2,0,5,0,3,0,0
  824 0000022E 00 09 00 
              00 00 08 
              00 00 00         DCB              0,9,0,0,0,8,0,0,0
  825 00000237         
  826 00000237         testSolutionThree
  827 00000237 01 02 07 
              09 08 06 
              04 05 03         DCB              1,2,7,9,8,6,4,5,3
  828 00000240 09 08 03 
              05 04 07 
              01 02 06         DCB              9,8,3,5,4,7,1,2,6
  829 00000249 05 04 06 
              02 01 03 
              07 08 09         DCB              5,4,6,2,1,3,7,8,9
  830 00000252 07 05 08 
              03 06 04 
              02 09 01         DCB              7,5,8,3,6,4,2,9,1
  831 0000025B 02 03 04 
              01 09 05 
              08 06 07         DCB              2,3,4,1,9,5,8,6,7
  832 00000264 06 01 09 
              08 07 02 
              05 03 04         DCB              6,1,9,8,7,2,5,3,4
  833 0000026D 08 06 05 
              04 03 01 
              09 07 02         DCB              8,6,5,4,3,1,9,7,2
  834 00000276 04 07 02 
              06 05 09 
              03 01 08         DCB              4,7,2,6,5,9,3,1,8



ARM Macro Assembler    Page 22 


  835 0000027F 03 09 01 
              07 02 08 
              06 04 05         DCB              3,9,1,7,2,8,6,4,5
  836 00000288         
  837 00000288         displayTextNonSolved
  838 00000288 48 65 72 
              65 20 69 
              73 20 74 
              68 65 20 
              6F 72 69 
              67 69 6E 
              61 6C 20 
              67 72 69 
              64 20 3A 
              00               DCB              "Here is the original grid :",0
  839 000002A4         
  840 000002A4         displayTextFinal
  841 000002A4 48 65 72 
              65 20 69 
              73 20 74 
              68 65 20 
              66 69 6E 
              61 6C 20 
              67 72 69 
              64 20 3A 
              00               DCB              "Here is the final grid :",0
  842 000002BD         
  843 000002BD         uniqueSolution
  844 000002BD 54 68 65 
              20 73 6F 
              6C 75 74 
              69 6F 6E 
              20 69 73 
              20 75 6E 
              69 71 75 
              65 00            DCB              "The solution is unique",0
  845 000002D4         
  846 000002D4         multipleSolutions
  847 000002D4 54 68 65 
              20 73 6F 
              6C 75 74 
              69 6F 6E 
              20 69 73 
              20 6E 6F 
              74 20 75 
              6E 69 71 
              75 65 00         DCB              "The solution is not unique",0
  848 000002EF                 END
Command Line: --debug --xref --diag_suppress=9931 --apcs=interwork --depend=.\s
udoku.d -o.\sudoku.o -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -
IC:\Keil_v5\ARM\INC\Philips --predefine="__EVAL SETA 1" --predefine="__MICROLIB
 SETA 1" --predefine="__UVISION_VERSION SETA 524" --predefine="NO_CLOCK_SETUP S
ETA 1" --predefine="NO_EMC_SETUP SETA 1" --predefine="RAM_INTVEC SETA 1" --pred
efine="RAM_MODE SETA 1" --predefine="REMAP SETA 1" --list=.\sudoku.lst Sudoku.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

Sudoku 00000000

Symbol: Sudoku
   Definitions
      At line 1 in file Sudoku.s
   Uses
      None
Comment: Sudoku unused
alreadyUnique 00000550

Symbol: alreadyUnique
   Definitions
      At line 609 in file Sudoku.s
   Uses
      At line 603 in file Sudoku.s
Comment: alreadyUnique used once
checkCol 0000021C

Symbol: checkCol
   Definitions
      At line 320 in file Sudoku.s
   Uses
      At line 239 in file Sudoku.s
Comment: checkCol used once
checkRow 000001A0

Symbol: checkRow
   Definitions
      At line 270 in file Sudoku.s
   Uses
      At line 233 in file Sudoku.s
Comment: checkRow used once
checkSquare 00000298

Symbol: checkSquare
   Definitions
      At line 372 in file Sudoku.s
   Uses
      At line 247 in file Sudoku.s
Comment: checkSquare used once
colInPos2 00000348

Symbol: colInPos2
   Definitions
      At line 429 in file Sudoku.s
   Uses
      At line 416 in file Sudoku.s
      At line 418 in file Sudoku.s
      At line 420 in file Sudoku.s

colInPos3 00000350

Symbol: colInPos3
   Definitions
      At line 433 in file Sudoku.s
   Uses
      At line 423 in file Sudoku.s
      At line 425 in file Sudoku.s
      At line 427 in file Sudoku.s



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols


compareGrids 0000008C

Symbol: compareGrids
   Definitions
      At line 152 in file Sudoku.s
   Uses
      At line 125 in file Sudoku.s
      At line 145 in file Sudoku.s

copyNextValueForLoop 00000684

Symbol: copyNextValueForLoop
   Definitions
      At line 729 in file Sudoku.s
   Uses
      At line 735 in file Sudoku.s
Comment: copyNextValueForLoop used once
copy_grid_into_grid_to_display 00000674

Symbol: copy_grid_into_grid_to_display
   Definitions
      At line 724 in file Sudoku.s
   Uses
      At line 607 in file Sudoku.s
      At line 640 in file Sudoku.s

displayCharacters 0000064C

Symbol: displayCharacters
   Definitions
      At line 707 in file Sudoku.s
   Uses
      At line 714 in file Sudoku.s
Comment: displayCharacters used once
displayText 00000640

Symbol: displayText
   Definitions
      At line 703 in file Sudoku.s
   Uses
      None
Comment: displayText unused
dontreturn 000004A4

Symbol: dontreturn
   Definitions
      At line 558 in file Sudoku.s
   Uses
      At line 553 in file Sudoku.s
      At line 555 in file Sudoku.s

elseCompareGridsFalse 000000C4

Symbol: elseCompareGridsFalse
   Definitions
      At line 170 in file Sudoku.s
   Uses
      At line 167 in file Sudoku.s



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

Comment: elseCompareGridsFalse used once
endColCheck 00000358

Symbol: endColCheck
   Definitions
      At line 437 in file Sudoku.s
   Uses
      At line 409 in file Sudoku.s
      At line 411 in file Sudoku.s
      At line 413 in file Sudoku.s
      At line 431 in file Sudoku.s
      At line 435 in file Sudoku.s

endCopy 0000069C

Symbol: endCopy
   Definitions
      At line 736 in file Sudoku.s
   Uses
      At line 731 in file Sudoku.s
Comment: endCopy used once
endFirstForLoop 000003FC

Symbol: endFirstForLoop
   Definitions
      At line 493 in file Sudoku.s
   Uses
      At line 466 in file Sudoku.s
      At line 486 in file Sudoku.s

endFor1 00000214

Symbol: endFor1
   Definitions
      At line 309 in file Sudoku.s
   Uses
      At line 307 in file Sudoku.s
Comment: endFor1 used once
endFor2 00000204

Symbol: endFor2
   Definitions
      At line 301 in file Sudoku.s
   Uses
      At line 299 in file Sudoku.s
Comment: endFor2 used once
endForCol1 00000294

Symbol: endForCol1
   Definitions
      At line 361 in file Sudoku.s
   Uses
      At line 347 in file Sudoku.s
      At line 358 in file Sudoku.s

endForCol2 00000280

Symbol: endForCol2
   Definitions



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols

      At line 352 in file Sudoku.s
   Uses
      At line 350 in file Sudoku.s
Comment: endForCol2 used once
endForCompareGrids 000000B4

Symbol: endForCompareGrids
   Definitions
      At line 164 in file Sudoku.s
   Uses
      At line 157 in file Sudoku.s
      At line 161 in file Sudoku.s

endForLoopTry 00000570

Symbol: endForLoopTry
   Definitions
      At line 621 in file Sudoku.s
   Uses
      At line 565 in file Sudoku.s
      At line 567 in file Sudoku.s

endIfCompareGridsTrue 000000C8

Symbol: endIfCompareGridsTrue
   Definitions
      At line 172 in file Sudoku.s
   Uses
      At line 169 in file Sudoku.s
Comment: endIfCompareGridsTrue used once
endIfResetnxtCol 0000043C

Symbol: endIfResetnxtCol
   Definitions
      At line 528 in file Sudoku.s
   Uses
      At line 525 in file Sudoku.s
Comment: endIfResetnxtCol used once
endPushValues 000003A8

Symbol: endPushValues
   Definitions
      At line 461 in file Sudoku.s
   Uses
      At line 442 in file Sudoku.s
Comment: endPushValues used once
endRowCheck 00000300

Symbol: endRowCheck
   Definitions
      At line 407 in file Sudoku.s
   Uses
      At line 379 in file Sudoku.s
      At line 381 in file Sudoku.s
      At line 383 in file Sudoku.s
      At line 401 in file Sudoku.s
      At line 405 in file Sudoku.s

endSecondForLoop 000003F4



ARM Macro Assembler    Page 5 Alphabetic symbol ordering
Relocatable symbols


Symbol: endSecondForLoop
   Definitions
      At line 490 in file Sudoku.s
   Uses
      At line 472 in file Sudoku.s
      At line 477 in file Sudoku.s

for1 000001B0

Symbol: for1
   Definitions
      At line 275 in file Sudoku.s
   Uses
      At line 308 in file Sudoku.s
Comment: for1 used once
for2 000001C8

Symbol: for2
   Definitions
      At line 282 in file Sudoku.s
   Uses
      At line 300 in file Sudoku.s
Comment: for2 used once
forCol1 0000022C

Symbol: forCol1
   Definitions
      At line 325 in file Sudoku.s
   Uses
      At line 359 in file Sudoku.s
Comment: forCol1 used once
forCol2 00000244

Symbol: forCol2
   Definitions
      At line 332 in file Sudoku.s
   Uses
      At line 351 in file Sudoku.s
Comment: forCol2 used once
forColPrint 00000618

Symbol: forColPrint
   Definitions
      At line 685 in file Sudoku.s
   Uses
      At line 694 in file Sudoku.s
Comment: forColPrint used once
forCompareGrids 00000094

Symbol: forCompareGrids
   Definitions
      At line 155 in file Sudoku.s
   Uses
      At line 163 in file Sudoku.s
Comment: forCompareGrids used once
forFirstForLoop 000003B0

Symbol: forFirstForLoop



ARM Macro Assembler    Page 6 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 464 in file Sudoku.s
   Uses
      At line 492 in file Sudoku.s
Comment: forFirstForLoop used once
forLoopPrint 000005CC

Symbol: forLoopPrint
   Definitions
      At line 657 in file Sudoku.s
   Uses
      At line 666 in file Sudoku.s
Comment: forLoopPrint used once
forLoopPushValuesOnStack 0000035C

Symbol: forLoopPushValuesOnStack
   Definitions
      At line 440 in file Sudoku.s
   Uses
      At line 460 in file Sudoku.s
Comment: forLoopPushValuesOnStack used once
forLoopTry 000004AC

Symbol: forLoopTry
   Definitions
      At line 563 in file Sudoku.s
   Uses
      At line 620 in file Sudoku.s
Comment: forLoopTry used once
forSecondForLoop 000003C8

Symbol: forSecondForLoop
   Definitions
      At line 474 in file Sudoku.s
   Uses
      At line 489 in file Sudoku.s
Comment: forSecondForLoop used once
getSquare 000000CC

Symbol: getSquare
   Definitions
      At line 183 in file Sudoku.s
   Uses
      At line 279 in file Sudoku.s
      At line 287 in file Sudoku.s
      At line 329 in file Sudoku.s
      At line 339 in file Sudoku.s
      At line 448 in file Sudoku.s
      At line 452 in file Sudoku.s
      At line 456 in file Sudoku.s
      At line 533 in file Sudoku.s

hasBeenSet 000005B0

Symbol: hasBeenSet
   Definitions
      At line 642 in file Sudoku.s
   Uses
      At line 635 in file Sudoku.s



ARM Macro Assembler    Page 7 Alphabetic symbol ordering
Relocatable symbols

      At line 637 in file Sudoku.s

isValid 00000120

Symbol: isValid
   Definitions
      At line 224 in file Sudoku.s
   Uses
      At line 104 in file Sudoku.s
      At line 578 in file Sudoku.s

notEq2 00000274

Symbol: notEq2
   Definitions
      At line 348 in file Sudoku.s
   Uses
      At line 343 in file Sudoku.s
      At line 345 in file Sudoku.s

notEqual 000001F8

Symbol: notEqual
   Definitions
      At line 296 in file Sudoku.s
   Uses
      At line 291 in file Sudoku.s
      At line 293 in file Sudoku.s

notEqualForLoops 000003F0

Symbol: notEqualForLoops
   Definitions
      At line 487 in file Sudoku.s
   Uses
      At line 482 in file Sudoku.s
      At line 484 in file Sudoku.s

notLastSquare 00000474

Symbol: notLastSquare
   Definitions
      At line 545 in file Sudoku.s
   Uses
      At line 540 in file Sudoku.s
      At line 542 in file Sudoku.s

notLastSquare2 0000050C

Symbol: notLastSquare2
   Definitions
      At line 590 in file Sudoku.s
   Uses
      At line 585 in file Sudoku.s
      At line 587 in file Sudoku.s

notUniqueAnymore 00000568

Symbol: notUniqueAnymore



ARM Macro Assembler    Page 8 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 616 in file Sudoku.s
   Uses
      None
Comment: notUniqueAnymore unused
printGrid 000005C0

Symbol: printGrid
   Definitions
      At line 653 in file Sudoku.s
   Uses
      None
Comment: printGrid unused
printRow 000005FC

Symbol: printRow
   Definitions
      At line 677 in file Sudoku.s
   Uses
      At line 662 in file Sudoku.s
Comment: printRow used once
returnFalse 00000190

Symbol: returnFalse
   Definitions
      At line 257 in file Sudoku.s
   Uses
      At line 236 in file Sudoku.s
      At line 243 in file Sudoku.s
      At line 251 in file Sudoku.s

returnSudokuSubroutine 00000590

Symbol: returnSudokuSubroutine
   Definitions
      At line 633 in file Sudoku.s
   Uses
      At line 544 in file Sudoku.s
      At line 557 in file Sudoku.s
      At line 560 in file Sudoku.s
      At line 589 in file Sudoku.s
      At line 615 in file Sudoku.s
      At line 624 in file Sudoku.s

rowInPos2 000002F0

Symbol: rowInPos2
   Definitions
      At line 399 in file Sudoku.s
   Uses
      At line 386 in file Sudoku.s
      At line 388 in file Sudoku.s
      At line 390 in file Sudoku.s

rowInPos3 000002F8

Symbol: rowInPos3
   Definitions
      At line 403 in file Sudoku.s



ARM Macro Assembler    Page 9 Alphabetic symbol ordering
Relocatable symbols

   Uses
      At line 393 in file Sudoku.s
      At line 395 in file Sudoku.s
      At line 397 in file Sudoku.s

setSquare 000000F4

Symbol: setSquare
   Definitions
      At line 203 in file Sudoku.s
   Uses
      At line 573 in file Sudoku.s
      At line 631 in file Sudoku.s

skipNonZero 000004A8

Symbol: skipNonZero
   Definitions
      At line 561 in file Sudoku.s
   Uses
      At line 537 in file Sudoku.s
Comment: skipNonZero used once
squareNotValid 00000568

Symbol: squareNotValid
   Definitions
      At line 618 in file Sudoku.s
   Uses
      At line 582 in file Sudoku.s
      At line 598 in file Sudoku.s
      At line 601 in file Sudoku.s
      At line 608 in file Sudoku.s
      At line 611 in file Sudoku.s

start 00000000

Symbol: start
   Definitions
      At line 7 in file Sudoku.s
   Uses
      At line 4 in file Sudoku.s
Comment: start used once
stop 00000088

Symbol: stop
   Definitions
      At line 149 in file Sudoku.s
   Uses
      At line 149 in file Sudoku.s
Comment: stop used once
stopForPrint 000005F0

Symbol: stopForPrint
   Definitions
      At line 667 in file Sudoku.s
   Uses
      At line 659 in file Sudoku.s
Comment: stopForPrint used once
stopReading 00000668



ARM Macro Assembler    Page 10 Alphabetic symbol ordering
Relocatable symbols


Symbol: stopReading
   Definitions
      At line 715 in file Sudoku.s
   Uses
      At line 710 in file Sudoku.s
Comment: stopReading used once
stopRowPrint 0000063C

Symbol: stopRowPrint
   Definitions
      At line 695 in file Sudoku.s
   Uses
      At line 687 in file Sudoku.s
Comment: stopRowPrint used once
sudoku 00000404

Symbol: sudoku
   Definitions
      At line 510 in file Sudoku.s
   Uses
      At line 118 in file Sudoku.s
      At line 139 in file Sudoku.s
      At line 550 in file Sudoku.s
      At line 595 in file Sudoku.s

testStageOne 00000004

Symbol: testStageOne
   Definitions
      At line 97 in file Sudoku.s
   Uses
      At line 107 in file Sudoku.s
Comment: testStageOne used once
testStageThree 0000005C

Symbol: testStageThree
   Definitions
      At line 129 in file Sudoku.s
   Uses
      None
Comment: testStageThree unused
testStageTwo 0000002C

Symbol: testStageTwo
   Definitions
      At line 111 in file Sudoku.s
   Uses
      At line 99 in file Sudoku.s
Comment: testStageTwo used once
66 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

Grids 00000000

Symbol: Grids
   Definitions
      At line 738 in file Sudoku.s
   Uses
      None
Comment: Grids unused
displayTextFinal 000002A4

Symbol: displayTextFinal
   Definitions
      At line 840 in file Sudoku.s
   Uses
      None
Comment: displayTextFinal unused
displayTextNonSolved 00000288

Symbol: displayTextNonSolved
   Definitions
      At line 837 in file Sudoku.s
   Uses
      None
Comment: displayTextNonSolved unused
finalGrid 00000000

Symbol: finalGrid
   Definitions
      At line 744 in file Sudoku.s
   Uses
      At line 123 in file Sudoku.s
      At line 143 in file Sudoku.s
      At line 727 in file Sudoku.s

multiSolutionGrid 00000051

Symbol: multiSolutionGrid
   Definitions
      At line 756 in file Sudoku.s
   Uses
      None
Comment: multiSolutionGrid unused
multipleSolutions 000002D4

Symbol: multipleSolutions
   Definitions
      At line 846 in file Sudoku.s
   Uses
      None
Comment: multipleSolutions unused
testGridOne 000000F3

Symbol: testGridOne
   Definitions
      At line 782 in file Sudoku.s
   Uses
      At line 100 in file Sudoku.s
Comment: testGridOne used once
testGridThree 000001E6



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols


Symbol: testGridThree
   Definitions
      At line 815 in file Sudoku.s
   Uses
      At line 130 in file Sudoku.s
Comment: testGridThree used once
testGridTwo 00000144

Symbol: testGridTwo
   Definitions
      At line 793 in file Sudoku.s
   Uses
      At line 112 in file Sudoku.s
Comment: testGridTwo used once
testSolutionThree 00000237

Symbol: testSolutionThree
   Definitions
      At line 826 in file Sudoku.s
   Uses
      At line 144 in file Sudoku.s
Comment: testSolutionThree used once
testSolutionTwo 00000195

Symbol: testSolutionTwo
   Definitions
      At line 804 in file Sudoku.s
   Uses
      At line 124 in file Sudoku.s
Comment: testSolutionTwo used once
uniqueSolution 000002BD

Symbol: uniqueSolution
   Definitions
      At line 843 in file Sudoku.s
   Uses
      None
Comment: uniqueSolution unused
uniqueSolutionGrid 000000A2

Symbol: uniqueSolutionGrid
   Definitions
      At line 768 in file Sudoku.s
   Uses
      None
Comment: uniqueSolutionGrid unused
13 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

main 00000000

Symbol: main
   Definitions
      At line 2 in file Sudoku.s
   Uses
      None
Comment: main unused
sendchar 00000000

Symbol: sendchar
   Definitions
      At line 3 in file Sudoku.s
   Uses
      At line 664 in file Sudoku.s
      At line 669 in file Sudoku.s
      At line 690 in file Sudoku.s
      At line 692 in file Sudoku.s
      At line 712 in file Sudoku.s
      At line 717 in file Sudoku.s

2 symbols
421 symbols in table
