AREA	Sudoku, CODE, READONLY
IMPORT	main
IMPORT	sendchar
EXPORT	start
PRESERVE8

start

;
; write tests for getSquare subroutine
;
;	LDR	R0, =gridOne
;	MOV	R1, #0
;	MOV	R2, #0
;	BL	getSquare ; (check value in R0)
; write tests for setSquare subroutine
;
;	LDR	R0, =5
;	MOV	R1, #0
;	MOV	R2, #2
;	BL setSquare
;
; write tests for isValid subroutine
;
;MOV	R1, #0
;MOV R2, #0;
;BL checkSquare
;
; write tests for other subroutines
; testing subroutines from isValid
;	MOV	R1, #7
;	MOV R2, #8;
;	BL isValid
;	BL checkRow
;	MOV R3, R0;
;	BL checkCol
;	MOV R4, R0
;	BL checkSquare
;	MOV R5, R0;
;
; test sudoku subroutine
;
LDR R10,= gridOne
MOV	R1, #0
MOV	R2, #0
BL sudoku
MOV R3, R0;

BL printGrid
stop	B	stop



; getSquare subroutine
;gets the value of a digit with a given row and column
;	Parameters :
;	R1 : row index
;	R2 column index
;	R0 digit return value
getSquare
STMFD sp!, {R3-R6, lr}; save registers
LDR	R3, =gridOne	; load address of first value (base Address)
MOV R4, R1			; save row
MOV R5, R2			; save col
; accessing value of a 2D array
LDR R6,=9			; tmp = 9
MUL R6, R4, R6		;  tmp address of value = tmp * row ( = 9 * row)
ADD R6, R6, R5		; address of value = tmpAddress + col + baseAddress
ADD R6, R6, R3;
LDRB R0, [R6]		; Load Byte value at address
LDMFD sp!,{R3-R6, pc}; restore registers

; setSquare subroutine
; sets a number value at a column and row index
;	Parameters:
;	R0 : byte value to store
;	R1 : row index
;	R2 : column index
setSquare
STMFD sp!, {R3-R7, lr}; save registers
MOV	R3,R0			; value
MOV R4, R1			;row
MOV R5, R2			;column
LDR R6,=gridOne		; load base address
LDR R7,=9			;
MUL R7, R4, R7		; address = 9 * row + column + base address
ADD R7, R7, R5		;
ADD R7, R7, R6;
STRB R3, [R7]		; store value at [address]
LDMFD sp!,{R3-R7, pc}; restore registers


; isValid subroutine
; checks if a grid is (partially) valid or not
;	Parameters
;	R1 : row index
;	R2 : column index
;	R0 return value (TRUE or FALSE : 1 or 0)
isValid
STMFD sp!, {R3-R5, lr}; save registers
MOV R3, R1			; row
MOV R4, R2			; column
LDR R5,=0;
BL checkRow			; check if row, column and square is valid
ADD R5, R5, R0;
CMP R5, #1;
BNE returnFalse
MOV R1, R3			;restore row
MOV R2, R4			; restore column
BL checkCol
ADD R5, R5, R0;
CMP R5, #2;
BNE returnFalse
MOV R1, R3			;restore row
MOV R2, R4			; restore column
BL checkSquare
ADD R5, R5, R0;

CMP R5, #3;
BNE returnFalse

LDR R0,= 1;
MOV R1, R3			;restore row
MOV R2, R4			; restore column
LDMFD sp!,{R3-R5, pc}; restore registers
returnFalse
MOV R1, R3			;restore row
MOV R2, R4			; restore column
LDR R0,= 0;
LDMFD sp!,{R3-R5, pc}; restore registers


; checkRow subroutine
;gets a row index and checks if that row is valid or not
;	Parameters :
;	R1 : Row index
;	R0 : boolean output value (1 or 0)
checkRow
STMFD sp!, {R3-R7, lr}; save registers
MOV R3, R1			  ; row
LDR R4,= 0			  ; for(int i = 0; i < length - 1; i++){
for1
MOV R1, R3			  ; value1 = getSquare(Row : row, Column : i)
MOV R2, R4;
BL getSquare
MOV R5, R0;
MOV R6, R4
for2					;   for (int j = i +1; j < length; j++){
ADD R6, R6, #1;
MOV R1, R3			; value2 = getSquare(Row : row, Column : j)
MOV R2, R6;
BL getSquare
MOV R7, R0;

CMP R5, R7			; if(value 1 == value 2 && value 1 != 0) return false
BNE notEqual
CMP R5, #0;
BEQ notEqual
LDR R0,=0;
LDMFD sp!,{R3-R7, pc};	restore registers
notEqual

CMP R6, #8; }
BHS endFor2
B for2
endFor2


ADD R4, R4, #1;
; compares with 8 and not 9 because count is incremented after loading the value at that index
CMP R4, #8;
BHS endFor1
B for1
endFor1					; }
LDR R0,=1		; returnValue = true
LDMFD sp!,{R3-R7, pc};	restore registers


; checkCol subroutine
;gets a Column index and checks if that column is valid or not
;	Parameters :
;	R2 : Column index
;	R0 : boolean output value (1 or 0)
checkCol
STMFD sp!, {R3-R7, lr}; save registers
MOV R3, R2			 ; column
LDR R4,= 0			 ; for(int i = 0; i < length - 1; i++){
forCol1
MOV R1, R4;
MOV R2, R3;
BL getSquare		; value1 = getSquare(Row : i, Column : column)
MOV R5, R0;
MOV R6, R4;
forCol2
          ; for (int j = i +1; j < length; j++){
ADD R6, R6, #1;

MOV R1, R6;
MOV R2, R3;
BL getSquare		 ;value2 = getSquare(Row : j, Column : column)
MOV R7, R0;

CMP R5, R7			; if(value 1 == value 2 && value 1 != 0) return false
BNE notEq2
CMP R5, #0;
BEQ notEq2
LDR R0,=0;
B endForCol1		; }
notEq2

CMP R6, #8;
BHS endForCol2
B forCol2
endForCol2

ADD R4, R4, #1;
LDR R0,=1			; returnValue = true (was changed by subroutine getSquare)
; compares with 8 and not 9 because count is incremented after loading the value at that index
CMP R4, #8;
BHS endForCol1
B forCol1			; }
endForCol1
LDMFD sp!,{R3-R7, pc};	restore registers


; checkSquare subroutine
;gets a row and a column index and checks if the square it is positionned in is valid or not
;	Parameters :
;	R1 : Row index
;	R2 : Column index
;	R0 : boolean output value (1 or 0)
checkSquare
STMFD sp!, {R3-R10, lr}; save registers
MOV R3, R1				; row
MOV R4, R2				; column
; getting the indexes to point at the top left of each sub-square
CMP R3, #0				; if(row == 0 || row == 3 || row == 6) row = row
BEQ endRowCheck
CMP R3, #3;
BEQ endRowCheck
CMP R3, #6;
BEQ endRowCheck

CMP R3, #1				; else if(row ==1 || row == 4 || row ==7) row = row -1
BEQ rowInPos2
CMP R3, #4;
BEQ rowInPos2
CMP R3, #7;
BEQ rowInPos2

CMP R3, #2				; else if( row == 2 || row ==5 || row == 8) row = row - 2
BEQ rowInPos3
CMP R3, #5;
BEQ rowInPos3
CMP R3, #8;
BEQ rowInPos3

rowInPos2
SUB R3, R3, #1;
B endRowCheck

rowInPos3
SUB R3, R3, #2;
B endRowCheck

endRowCheck
CMP R4, #0				;if(column == 0 || column == 3 || column == 6) column = column
BEQ endColCheck
CMP R4, #3;
BEQ endColCheck
CMP R4, #6;
BEQ endColCheck

CMP R4, #1				;if(column == 1 || column == 4 || column == 7) column = column - 1
BEQ colInPos2
CMP R4, #4;
BEQ colInPos2
CMP R4, #7;
BEQ colInPos2

CMP R4, #2				;if(column == 2 || column == 5 || column == 8) column = column - 8
BEQ colInPos3
CMP R4, #5;
BEQ colInPos3
CMP R4, #8;
BEQ colInPos3

colInPos2
SUB R4, R4, #1;
B endColCheck

colInPos3
SUB R4, R4, #2;
B endColCheck

endColCheck
; storing all of the 9 values of the sub-square on the system stack for ease of comparison
LDR R5,= 0;
forLoopPushValuesOnStack
CMP R5, #3				; for(int i = 0; i < 3; i++){
BHS endPushValues

MOV R1, R3				; value1 = getSquare(Row : row, Column : i)
MOV R2, R4
ADD R2, R2, R5
BL getSquare
MOV R7, R0;
ADD R1, R1, #1			;value2 = getSquare(Row : row+1, Column : i)
BL getSquare
MOV R8, R0;
ADD R1, R1, #1;
BL getSquare			; value3 = getSquare(Row : row+2, Column : i)
MOV R9, R0;
STMFD sp!, {R7-R9}		; push value1,value2 and value3 on system stack
ADD R5, R5, #1;
B forLoopPushValuesOnStack
endPushValues				;  }
LDR R0,= 1				; tmpReturnValue = true
LDR R3,= 0;
forFirstForLoop
CMP	R3, #8				; for(int i = 0; i < 8; i++){
BHS endFirstForLoop

LDR R6, [sp, R3, LSL #2]; value1 = sp + i * 4
MOV R4, R3;

CMP R6, #0				; for(int j = i+1; j < 9; i++){
BEQ endSecondForLoop

forSecondForLoop
ADD R4, R4, #1;
CMP R4, #9;
BHS endSecondForLoop

LDR R7, [sp, R4, LSL #2]; value2 = sp + j * 4

CMP R6, R7				; if(value 1 == value2 && value1 != 0) return false
BNE notEqualForLoops
CMP R6, #0;
BEQ notEqualForLoops
LDR R0,=0;
B endFirstForLoop
notEqualForLoops

B forSecondForLoop		; }
endSecondForLoop
ADD R3, R3, #1;
B forFirstForLoop
endFirstForLoop				;  }
ADD sp, sp, #36			; pop 9 pushed values (9 * 4)
LDMFD sp!,{R3-R10, pc};	 restore registers

; sudoku subroutine
;automatically fills the sudoku grid using 'brute force'
;returns if the grid has compeletely been filled or if the grid is not solvable
; Paramteres :
;	R1 : Row
;	R2 : Column
;	R0 : return boolean value(result)
sudoku
STMFD sp!, {R3-R9, lr}; save registers
LDR R0,= 0; result = false;
MOV R3, R1;row
MOV R4, R2;column

MOV R5, R3; nxtrow = row
MOV R6, R4; nxtcol = col + 1
ADD R6, R6, #1;

CMP R6, #8; if (nxtcol > 8 ) {
BLS endIfResetnxtCol
LDR R6,= 0; nxtcol = 0
ADD R5, R5, #1; nxtrow++ }
endIfResetnxtCol

MOV R1, R3;
MOV R2, R4;
BL getSquare
MOV R7, R0; value = getSquare(Row : row, Column : col)
LDR R0,= 0; result = false; (as overwritten by getSquare subroutine)
CMP R7, #0	; if(value != 0){
BEQ skipSuccess

CMP R3, #8	; if(row == 8 && col == 8) return true;
BNE notLastSquare
CMP R4, #8;
BNE notLastSquare
LDR R0,= 1;
B returnSudokuSubroutine
notLastSquare
MOV R1, R5;	else {
MOV R2, R6; result = sudoku(Row : nxtRow, Column = nxtcol)
BL sudoku
B returnSudokuSubroutine ; }
skipSuccess			; } else {
LDR R8,= 1; for(byte i = 1; i <= 9; i++){
forLoopTry
CMP R8, #9
BHI endForLoopTry
MOV R0, R8;
MOV R1, R3;
MOV R2, R4;
BL setSquare; setSquare(Row : row, Column : col, Value : i)
MOV R1, R3;
MOV R2, R4;
BL isValid;
MOV R9, R0; isValidResult = isValid(Row : row, Column : col)
LDR R0,= 0; result = false (overwritten by subroutine)
CMP R9, #1;	if(isValidResult){
BNE squareNotValid

CMP R3, #8	; if(row == 8 && col == 8) return true;
BNE notLastSquare2
CMP R4, #8;
BNE notLastSquare2
LDR R0,= 1;
B returnSudokuSubroutine
notLastSquare2
MOV R1, R5;	else {
MOV R2, R6; result = sudoku(Row : nxtRow, Column = nxtcol)
BL sudoku;	branch out of for loop
B endForLoopTry ; }
squareNotValid;		}

ADD R8, R8, #1;
B forLoopTry
endForLoopTry	; }

CMP R0, #0; if(!result){
BNE returnSudokuSubroutine
MOV R1, R3;
MOV R2, R4;
BL getSquare; try = getSquare(Row, : row, Column : col)
MOV R8, R0;
ADD R8, R8, #1; try++
LDR R0,= 0;	 setSquare(Row : row, Column : col, Value : 0)
BL setSquare;
CMP R8, #9; if(try < 10) branch to top of for loop;
BHI dontBranchToForLoopTRY
B forLoopTry
dontBranchToForLoopTRY	;  }
returnSudokuSubroutine
LDMFD sp!,{R3-R9, pc};	 restore registers

; printGrid subroutine
;prints the current sudoku grid
; Doesn't use parameters
printGrid
STMFD sp!, {R3, lr}; save registers
LDR R3,= 0; row = 0;

forLoopPrint
CMP R3, #9; for(int row = 0; row < 9; row++){
BHS stopForPrint
MOV R1, R3;
BL printRow
MOV R0, #10
BL sendchar
ADD R3, R3, #1;
B forLoopPrint
stopForPrint
MOV R0, #10
BL sendchar
LDMFD sp!,{R3, pc};	 restore registers

; printRow subroutine
;prints the current row in the console
; Parameters :
;	R1 : row index
printRow
STMFD sp!, {R3-R6, lr}; save registers
MOV R3, R1;
LDR R5,= gridOne
LDR R6,= 9;
MUL R6, R3, R6;
ADD R5, R5, R6;
LDR R4,= 0; row = 0;
forColPrint
CMP R4, #9; for(int col = 0; col < 9; row++){
BHS stopRowPrint
LDRB R6, [R5, R4];
ADD R0, R6, #'0'
BL sendchar
LDR R0,= 1;
BL sendchar
ADD R4, R4, #1;
B forColPrint
stopRowPrint
LDMFD sp!,{R3-R6, pc};	 restore registers

AREA	Grids, DATA, READWRITE

gridOne
  DCB	7,9,0,0,0,0,3,0,0
    DCB	0,0,0,0,0,6,9,0,0
    DCB	8,0,0,0,3,0,0,7,6
    DCB	0,0,0,0,0,5,0,0,2
    DCB	0,0,5,4,1,8,7,0,0
    DCB	4,0,0,7,0,0,0,0,0
    DCB	6,1,0,0,9,0,0,0,8
    DCB	0,0,2,3,0,0,0,0,0
    DCB	0,0,9,0,0,0,0,5,4


gridTwo
  DCB 8,0,0,4,0,6,0,0,7
    DCB	0,0,0,0,0,0,4,0,0
    DCB	0,1,0,0,0,0,6,5,0
    DCB	5,0,9,0,3,0,7,8,0
    DCB	0,0,0,0,7,0,0,0,0
    DCB	0,4,8,0,2,0,1,0,3
    DCB	0,5,2,0,0,0,0,9,0
    DCB	0,0,1,0,0,0,0,0,0
    DCB	3,0,0,9,0,2,0,0,5
gridThree
  DCB 0,0,0,0,0,0,0,0,0
  DCB 0,0,0,0,0,0,0,0,0
  DCB 0,0,0,0,0,0,0,0,0
  DCB 0,0,0,0,0,0,0,0,0
  DCB 0,0,0,0,0,0,0,0,0
  DCB 0,0,0,0,0,0,0,0,0
  DCB 0,0,0,0,0,0,0,0,0
  DCB 0,0,0,0,0,0,0,0,0
  DCB 0,0,0,0,0,0,0,0,0
;
; add other grids for test cases
;

END
