


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             BubbleSort, CODE, READONLY
    2 00000000                 IMPORT           main
    3 00000000                 EXPORT           start
    4 00000000         
    5 00000000         start
    6 00000000 E59F007C        LDR              R0, =testarr ; load address of 
                                                            first number
    7 00000004 E3A0100A        LDR              R1, =N      ; load length of ar
                                                            ray
    8 00000008 EB000000        BL               sort        ; call subroutine s
                                                            ort
    9 0000000C EA00001B        B                stop        ; end the program
   10 00000010         
   11 00000010         
   12 00000010         sort
   13 00000010         ;
   14 00000010         ; sort subroutine
   15 00000010         ;sorts an array of numbers in ascending order (from lowe
                       st to highest)
   16 00000010         ; Parameters
   17 00000010         ;  [R0] : address of the first number
   18 00000010         ;  [R1] : size of the array(amount of numbers to sort)
   19 00000010         
   20 00000010 E92D40E0        STMFD            sp!, {R5-R7, lr} ; save registe
                                                            rs and lr
   21 00000014         wh                                   ;do{
   22 00000014 E3A03000        ldr              R3, =0      ;swapped = false
   23 00000018 E3A04001        LDR              R4, =1      ; i = 1
   24 0000001C         
   25 0000001C         forLoop
   26 0000001C E1540001        CMP              R4, R1      ;for(i<length(array
                                                            ); i++){
   27 00000020 2A00000C        BHS              endFor
   28 00000024         
   29 00000024 E7905104        LDR              R5, [R0, R4, LSL #2] 
                                                            ; loading array[i]
   30 00000028 E2446001        SUB              R6, R4, #1  ; tmp = i - 1
   31 0000002C E7906106        LDR              R6, [R0, R6, LSL #2] ; loading 
                                                            array[tmp]
   32 00000030         
   33 00000030 E1560005        CMP              R6, R5      ;if(array[i-1] > ar
                                                            ray[i]){
   34 00000034 9A000005        BLS              endif
   35 00000038         
   36 00000038         ; LDR R2, [R0, R4, LSL #2] ;
   37 00000038 E1A02004        MOV              R2, R4      ;
   38 0000003C E3A07004        LDR              R7,= 4      ;
   39 00000040 E0020297        MUL              R2, R7, R2  ;addressToPass = (i
                                                             * 4) + firstAddres
                                                            s
   40 00000044 E0822000        ADD              R2, R2, R0  ;
   41 00000048 EB000006        BL               swap        ;swap(array[i])
   42 0000004C E3A03001        LDR              R3, =1      ;swapped = true 
   43 00000050         endif                                ;}
   44 00000050 E2844001        ADD              R4, R4, #1  ;
   45 00000054 EAFFFFF0        B                forLoop     ;}
   46 00000058         endFor
   47 00000058 E3530001        CMP              R3, #1      ;
   48 0000005C 1A000000        BNE              eWh         ; } while(swapped)



ARM Macro Assembler    Page 2 


   49 00000060 EAFFFFEB        B                wh
   50 00000064         
   51 00000064         eWh
   52 00000064 E8BD80E0        LDMFD            sp!, {R5-R7, pc} 
                                                            ; restore registers
                                                            
   53 00000068         
   54 00000068         swap
   55 00000068         ;
   56 00000068         ;swap subroutine
   57 00000068         ;swap 2 elements in a 1 dimensional array of word siwe i
                       ntegers
   58 00000068         ;  [R2 - 4] : address of the first element to be swapped
                       
   59 00000068         ;  [R2] : address of the second element to swap
   60 00000068         
   61 00000068 E92D4060        STMFD            sp!, {R5-R6, lr} ; save registe
                                                            rs and lr
   62 0000006C         
   63 0000006C E5125004        LDR              R5, [R2, #-4] ; load word size 
                                                            value at address R4
                                                            
   64 00000070 E5926000        LDR              R6, [R2]    ; load word size va
                                                            lue at address R3
   65 00000074 E5026004        STR              R6, [R2, #-4] ; load value at a
                                                            ddress R3
   66 00000078 E5825000        STR              R5, [R2]    ; load value at add
                                                            ress R4
   67 0000007C         
   68 0000007C E8BD8060        LDMFD            sp!, {R5-R6, pc} 
                                                            ; restore registers
                                                            
   69 00000080         
   70 00000080 EAFFFFFE 
                       stop    B                stop
   71 00000084         
   72 00000084         
   73 00000084 00000000 
              00000000         AREA             TestData, DATA, READWRITE
   74 00000000 0000000A 
                       N       EQU              10
   75 00000000 00000003 
              00000009 
              00000002 
              00000001 
              00000008 
              00000000 
              00000007 
              00000004 
              00000009 
              00000006 testarr DCD              3,9,2,1,8,0,7,4,9,6
   76 00000028                 END
Command Line: --debug --xref --diag_suppress=9931 --apcs=interwork --depend=.\b
ubblesort.d -o.\bubblesort.o -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\I
nclude -IC:\Keil_v5\ARM\INC\Philips --predefine="__EVAL SETA 1" --predefine="__
MICROLIB SETA 1" --predefine="__UVISION_VERSION SETA 524" --predefine="NO_CLOCK
_SETUP SETA 1" --predefine="NO_EMC_SETUP SETA 1" --predefine="RAM_INTVEC SETA 1
" --predefine="RAM_MODE SETA 1" --predefine="REMAP SETA 1" --list=.\bubblesort.
lst BubbleSort.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

BubbleSort 00000000

Symbol: BubbleSort
   Definitions
      At line 1 in file BubbleSort.s
   Uses
      None
Comment: BubbleSort unused
eWh 00000064

Symbol: eWh
   Definitions
      At line 51 in file BubbleSort.s
   Uses
      At line 48 in file BubbleSort.s
Comment: eWh used once
endFor 00000058

Symbol: endFor
   Definitions
      At line 46 in file BubbleSort.s
   Uses
      At line 27 in file BubbleSort.s
Comment: endFor used once
endif 00000050

Symbol: endif
   Definitions
      At line 43 in file BubbleSort.s
   Uses
      At line 34 in file BubbleSort.s
Comment: endif used once
forLoop 0000001C

Symbol: forLoop
   Definitions
      At line 25 in file BubbleSort.s
   Uses
      At line 45 in file BubbleSort.s
Comment: forLoop used once
sort 00000010

Symbol: sort
   Definitions
      At line 12 in file BubbleSort.s
   Uses
      At line 8 in file BubbleSort.s
Comment: sort used once
start 00000000

Symbol: start
   Definitions
      At line 5 in file BubbleSort.s
   Uses
      At line 3 in file BubbleSort.s
Comment: start used once
stop 00000080

Symbol: stop



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 70 in file BubbleSort.s
   Uses
      At line 9 in file BubbleSort.s
      At line 70 in file BubbleSort.s

swap 00000068

Symbol: swap
   Definitions
      At line 54 in file BubbleSort.s
   Uses
      At line 41 in file BubbleSort.s
Comment: swap used once
wh 00000014

Symbol: wh
   Definitions
      At line 21 in file BubbleSort.s
   Uses
      At line 49 in file BubbleSort.s
Comment: wh used once
10 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

TestData 00000000

Symbol: TestData
   Definitions
      At line 73 in file BubbleSort.s
   Uses
      None
Comment: TestData unused
testarr 00000000

Symbol: testarr
   Definitions
      At line 75 in file BubbleSort.s
   Uses
      At line 6 in file BubbleSort.s
Comment: testarr used once
2 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

N 0000000A

Symbol: N
   Definitions
      At line 74 in file BubbleSort.s
   Uses
      At line 7 in file BubbleSort.s
Comment: N used once
1 symbol



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

main 00000000

Symbol: main
   Definitions
      At line 2 in file BubbleSort.s
   Uses
      None
Comment: main unused
1 symbol
354 symbols in table
