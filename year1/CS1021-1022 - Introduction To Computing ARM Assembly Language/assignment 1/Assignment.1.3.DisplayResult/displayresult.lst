


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             DisplayResult, CODE, READONLY
    2 00000000                 IMPORT           main
    3 00000000                 IMPORT           getkey
    4 00000000                 IMPORT           sendchar
    5 00000000                 EXPORT           start
    6 00000000                 PRESERVE8
    7 00000000         
    8 00000000         start
    9 00000000         
   10 00000000 E3A04000        MOV              R4, #0      ;inputNumber = 0
   11 00000004 E3A0500A        LDR              R5, = 10    ;multiplicator = 10
                                                            
   12 00000008 E3A0A000        MOV              R10, #0     ;sign = 0
   13 0000000C         
   14 0000000C         read
   15 0000000C EBFFFFFE        BL               getkey      ; read key from con
                                                            sole
   16 00000010         
   17 00000010 E3500039        CMP              R0, #'9'    ; if ( ch == 0x0D )
                                                            {
   18 00000014 8A000025        BHI              nextgetchar ; skip next if stat
                                                            ement  
   19 00000018 E350000D        CMP              R0, #0x0D   ;}
   20 0000001C 0A000001        BEQ              isEnter     ; if( ch > '9' || c
                                                            h < '*' ){
   21 00000020 E350002A        CMP              R0, #'*'    ; skip to next inpu
                                                            t }
   22 00000024 3A000021        BLO              nextgetchar ;
   23 00000028         isEnter                              ;
   24 00000028         
   25 00000028 E350002B        CMP              R0, #'+'    ;if( key == +) 
   26 0000002C 1A000004        BNE              notPlus     ;{ 
   27 00000030 EBFFFFFE        BL               sendchar    ;send key to consol
                                                            e
   28 00000034 E3A0A02B        MOV              R10, #'+'   ;sign = '+'
   29 00000038 E1A06004        MOV              R6, R4      ;number1 = inputNum
                                                            ber
   30 0000003C E3A04000        MOV              R4, #0      ;number2 = 0
   31 00000040 EA00001A        B                nextNumber  ;skip computations 
                                                            for this character 
                                                            and continue while 
                                                            loop to get second 
                                                            number
   32 00000044         notPlus                              ; }
   33 00000044         
   34 00000044 E350002D        CMP              R0, #'-'    ;if(key == '-' )
   35 00000048 1A000004        BNE              notMinus    ;{
   36 0000004C EBFFFFFE        BL               sendchar    ; send key to conso
                                                            le
   37 00000050 E3A0A02D        MOV              R10, #'-'   ; sign = '-'
   38 00000054 E1A06004        MOV              R6, R4      ; number1 = inputNu
                                                            mber
   39 00000058 E3A04000        MOV              R4, #0      ; number2 = 0
   40 0000005C EA000013        B                nextNumber  ; skip computations
                                                             for this character
                                                             and continue while
                                                             loop to get second
                                                             number
   41 00000060         notMinus                             ;}



ARM Macro Assembler    Page 2 


   42 00000060         
   43 00000060 E350002A        CMP              R0, #'*'    ;if(key == '*')
   44 00000064 1A000004        BNE              notMul      ;{
   45 00000068 EBFFFFFE        BL               sendchar    ; send key to conso
                                                            le
   46 0000006C E3A0A02A        MOV              R10, #'*'   ; sign = '*'
   47 00000070 E1A06004        MOV              R6, R4      ; number1 = inputNu
                                                            mber
   48 00000074 E3A04000        MOV              R4, #0      ; number2 = 0
   49 00000078 EA00000C        B                nextNumber  ; skip computations
                                                             for this character
                                                             and continue while
                                                             loop to get second
                                                             number
   50 0000007C         notMul                               ;}
   51 0000007C         
   52 0000007C E350002F        CMP              R0, #'/'    ;if(key == '/')
   53 00000080 1A000004        BNE              notDiv      ;{
   54 00000084 EBFFFFFE        BL               sendchar    ; send key to conso
                                                            le
   55 00000088 E3A0A02F        MOV              R10, #'/'   ; sign = '/'
   56 0000008C E1A06004        MOV              R6, R4      ; number1 = inputNu
                                                            mber
   57 00000090 E3A04000        MOV              R4, #0      ; number2 = 0
   58 00000094 EA000005        B                nextNumber  ; skip computations
                                                             for this character
                                                             and continue while
                                                             loop to get second
                                                             number
   59 00000098         notDiv                               ;}
   60 00000098         
   61 00000098 E350000D        CMP              R0, #0x0D   ; while (key != CR)
                                                            
   62 0000009C 0A000004        BEQ              endRead     ; {
   63 000000A0 EBFFFFFE        BL               sendchar    ; send key to conso
                                                            le
   64 000000A4         
   65 000000A4 E0040495        MUL              R4, R5, R4  ; inputNumber = inp
                                                            utNumber * 10
   66 000000A8 E2400030        SUB              R0, R0, #'0' ; converting numbe
                                                            r from ASCII to dec
                                                            imal ( tmp = tmp - 
                                                            '0')
   67 000000AC E0844000        ADD              R4, R4, R0  ; total = tmp + key
                                                             entered
   68 000000B0         nextNumber
   69 000000B0         nextgetchar
   70 000000B0 EAFFFFD5        B                read        ; }
   71 000000B4         endRead
   72 000000B4         
   73 000000B4 E35A002B        CMP              R10, #'+'   ; if(sign == '+')
   74 000000B8 1A000000        BNE              dontAdd     ;{
   75 000000BC E0845006        ADD              R5, R4, R6  ;result = number1 +
                                                             number2
   76 000000C0         dontAdd                              ;}
   77 000000C0         
   78 000000C0 E35A002D        CMP              R10, #'-'   ;if(sign == '-')
   79 000000C4 1A000000        BNE              dontSub     ;{
   80 000000C8 E0565004        SUBS             R5, R6, R4  ; result = number1 



ARM Macro Assembler    Page 3 


                                                            - number2
   81 000000CC         dontSub                              ;}
   82 000000CC         
   83 000000CC E35A002A        CMP              R10, #'*'   ;if(sign == '*')
   84 000000D0 1A000000        BNE              dontMul     ;{
   85 000000D4 E0050694        MUL              R5, R4, R6  ;result = number2 *
                                                             number1
   86 000000D8         dontMul                              ;}
   87 000000D8         
   88 000000D8 E35A002F        CMP              R10, #'/'   ;if(sign == '/'){
   89 000000DC 1A000008        BNE              dontDiv     ;
   90 000000E0 E3540000        CMP              R4, #0      ; if(number2 == 0){
                                                            
   91 000000E4 0A00002F        BEQ              divZero     ; skip to the end o
                                                            f the program }
   92 000000E8 E3A05000        MOV              R5, #0      ; quotient = 0
   93 000000EC E1A08006        MOV              R8, R6      ; remainder = numbe
                                                            r2
   94 000000F0         whilDiv
   95 000000F0 E1580004        CMP              R8, R4      ;while(remainder =>
                                                             number2]{
   96 000000F4 BA000002        BLT              endDiv      ;  
   97 000000F8 E2855001        ADD              R5, R5, #1  ;quotient = quotien
                                                            t +1
   98 000000FC E0488004        SUB              R8, R8, R4  ;remainder = remain
                                                            der - number2 }
   99 00000100 EAFFFFFA        B                whilDiv     ;}
  100 00000104         
  101 00000104         endDiv
  102 00000104         dontDiv
  103 00000104         
  104 00000104 E3A0003D        MOV              R0, #'='    ;
  105 00000108 EBFFFFFE        BL               sendchar    ; send '=' to conso
                                                            le
  106 0000010C         
  107 0000010C E3550000        CMP              R5, #0      ;if (result ==0)
  108 00000110 1A000001        BNE              notZero     ;{
  109 00000114 E3A00030        MOV              R0, #'0'    ;send 0 to console
  110 00000118 EBFFFFFE        BL               sendchar    ; }
  111 0000011C         notZero
  112 0000011C         
  113 0000011C E3550000        CMP              R5, #0      ; if( result < 0)
  114 00000120 AA000003        BGE              negativeNumber ;{
  115 00000124 E3F09000        MOVS             R9, #-1     ; tmp = -1
  116 00000128 E0150599        MULS             R5, R9, R5  ; result = result *
                                                             tmp
  117 0000012C E3A0002D        MOV              R0, #'-'    ; sent '-' to conso
                                                            le
  118 00000130 EBFFFFFE        BL               sendchar    ;
  119 00000134         negativeNumber                       ;} 
  120 00000134         
  121 00000134 E3A0900A        MOV              R9, #10     ; x = 10
  122 00000138 E3A07000        MOV              R7, #0      ; y = 0
  123 0000013C E3A08001        MOV              R8, #1      ; value x^y
  124 00000140         
  125 00000140         whilePwrOfTen
  126 00000140 E1580005        CMP              R8, R5      ; 
  127 00000144 8A000002        BHI              endPwrOfTen ; while ( x^y =< re
                                                            sult){



ARM Macro Assembler    Page 4 


  128 00000148 E0080899        MUL              R8, R9, R8  ; x^y = x^(y+1)
  129 0000014C E2877001        ADD              R7,R7, #1   ; y = y + 1 }
  130 00000150 EAFFFFFA        B                whilePwrOfTen
  131 00000154         endPwrOfTen
  132 00000154         
  133 00000154         whileRemainder
  134 00000154 E3570000        CMP              R7, #0      ; while(y != 0)
  135 00000158 0A000012        BEQ              endDisplay  ;{
  136 0000015C E2477001        SUB              R7, R7, #1  ; y = y -1
  137 00000160 E3A04000        MOV              R4, #0      ; tmpPwr = 0
  138 00000164 E3A06001        MOV              R6, #1      ; divisor = 10^0
  139 00000168         
  140 00000168         whlFindingDivisor
  141 00000168 E1540007        CMP              R4, R7      ;while(tmpPwr != y)
                                                            {
  142 0000016C 0A000002        BEQ              endwhDivisor ;
  143 00000170 E2844001        ADD              R4, R4, #1  ; tmpPwr = tmpPwr +
                                                             1
  144 00000174 E0060699        MUL              R6, R9, R6  ; divisor = divisor
                                                             * 10 }
  145 00000178 EAFFFFFA        B                whlFindingDivisor
  146 0000017C         endwhDivisor
  147 0000017C         
  148 0000017C E1A04005        MOV              R4, R5      ;remainder = result
                                                            
  149 00000180 E3A08000        MOV              R8, #0      ;quotient = 0
  150 00000184         whDividding
  151 00000184 E1540006        CMP              R4, R6      ;while (remainder >
                                                            = divisor) {
  152 00000188 BA000002        BLT              endDivision ;
  153 0000018C E2888001        ADD              R8,R8, #1   ;quotient = quotien
                                                            t + 1 
  154 00000190 E0444006        SUB              R4, R4, R6  ;remainder = remain
                                                            der - divisor }
  155 00000194 EAFFFFFA        B                whDividding
  156 00000198         endDivision
  157 00000198         
  158 00000198 E2880030        ADD              R0, R8, #'0' ; loads in R0 the 
                                                            ascii value for the
                                                             number stored in q
                                                            uotient
  159 0000019C EBFFFFFE        BL               sendchar    ; and sends it to t
                                                            he console 
  160 000001A0 E1A05004        MOV              R5, R4      ; result = remainde
                                                            r
  161 000001A4 EAFFFFEA        B                whileRemainder ; } (end of disp
                                                            laying the result s
                                                            tored in R5 to the 
                                                            console)
  162 000001A8         endDisplay
  163 000001A8         divZero
  164 000001A8 EAFFFFFE 
                       stop    B                stop
  165 000001AC         
  166 000001AC                 END
Command Line: --debug --xref --diag_suppress=9931 --apcs=interwork --depend=.\d
isplayresult.d -o.\displayresult.o -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\C
MSIS\Include -IC:\Keil_v5\ARM\INC\Philips --predefine="__EVAL SETA 1" --predefi
ne="__MICROLIB SETA 1" --predefine="__UVISION_VERSION SETA 524" --predefine="NO



ARM Macro Assembler    Page 5 


_CLOCK_SETUP SETA 1" --predefine="NO_EMC_SETUP SETA 1" --predefine="RAM_INTVEC 
SETA 1" --predefine="RAM_MODE SETA 1" --predefine="REMAP SETA 1" --list=.\displ
ayresult.lst DisplayResult.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

DisplayResult 00000000

Symbol: DisplayResult
   Definitions
      At line 1 in file DisplayResult.s
   Uses
      None
Comment: DisplayResult unused
divZero 000001A8

Symbol: divZero
   Definitions
      At line 163 in file DisplayResult.s
   Uses
      At line 91 in file DisplayResult.s
Comment: divZero used once
dontAdd 000000C0

Symbol: dontAdd
   Definitions
      At line 76 in file DisplayResult.s
   Uses
      At line 74 in file DisplayResult.s
Comment: dontAdd used once
dontDiv 00000104

Symbol: dontDiv
   Definitions
      At line 102 in file DisplayResult.s
   Uses
      At line 89 in file DisplayResult.s
Comment: dontDiv used once
dontMul 000000D8

Symbol: dontMul
   Definitions
      At line 86 in file DisplayResult.s
   Uses
      At line 84 in file DisplayResult.s
Comment: dontMul used once
dontSub 000000CC

Symbol: dontSub
   Definitions
      At line 81 in file DisplayResult.s
   Uses
      At line 79 in file DisplayResult.s
Comment: dontSub used once
endDisplay 000001A8

Symbol: endDisplay
   Definitions
      At line 162 in file DisplayResult.s
   Uses
      At line 135 in file DisplayResult.s
Comment: endDisplay used once
endDiv 00000104

Symbol: endDiv



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 101 in file DisplayResult.s
   Uses
      At line 96 in file DisplayResult.s
Comment: endDiv used once
endDivision 00000198

Symbol: endDivision
   Definitions
      At line 156 in file DisplayResult.s
   Uses
      At line 152 in file DisplayResult.s
Comment: endDivision used once
endPwrOfTen 00000154

Symbol: endPwrOfTen
   Definitions
      At line 131 in file DisplayResult.s
   Uses
      At line 127 in file DisplayResult.s
Comment: endPwrOfTen used once
endRead 000000B4

Symbol: endRead
   Definitions
      At line 71 in file DisplayResult.s
   Uses
      At line 62 in file DisplayResult.s
Comment: endRead used once
endwhDivisor 0000017C

Symbol: endwhDivisor
   Definitions
      At line 146 in file DisplayResult.s
   Uses
      At line 142 in file DisplayResult.s
Comment: endwhDivisor used once
isEnter 00000028

Symbol: isEnter
   Definitions
      At line 23 in file DisplayResult.s
   Uses
      At line 20 in file DisplayResult.s
Comment: isEnter used once
negativeNumber 00000134

Symbol: negativeNumber
   Definitions
      At line 119 in file DisplayResult.s
   Uses
      At line 114 in file DisplayResult.s
Comment: negativeNumber used once
nextNumber 000000B0

Symbol: nextNumber
   Definitions
      At line 68 in file DisplayResult.s
   Uses



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

      At line 31 in file DisplayResult.s
      At line 40 in file DisplayResult.s
      At line 49 in file DisplayResult.s
      At line 58 in file DisplayResult.s

nextgetchar 000000B0

Symbol: nextgetchar
   Definitions
      At line 69 in file DisplayResult.s
   Uses
      At line 18 in file DisplayResult.s
      At line 22 in file DisplayResult.s

notDiv 00000098

Symbol: notDiv
   Definitions
      At line 59 in file DisplayResult.s
   Uses
      At line 53 in file DisplayResult.s
Comment: notDiv used once
notMinus 00000060

Symbol: notMinus
   Definitions
      At line 41 in file DisplayResult.s
   Uses
      At line 35 in file DisplayResult.s
Comment: notMinus used once
notMul 0000007C

Symbol: notMul
   Definitions
      At line 50 in file DisplayResult.s
   Uses
      At line 44 in file DisplayResult.s
Comment: notMul used once
notPlus 00000044

Symbol: notPlus
   Definitions
      At line 32 in file DisplayResult.s
   Uses
      At line 26 in file DisplayResult.s
Comment: notPlus used once
notZero 0000011C

Symbol: notZero
   Definitions
      At line 111 in file DisplayResult.s
   Uses
      At line 108 in file DisplayResult.s
Comment: notZero used once
read 0000000C

Symbol: read
   Definitions
      At line 14 in file DisplayResult.s



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols

   Uses
      At line 70 in file DisplayResult.s
Comment: read used once
start 00000000

Symbol: start
   Definitions
      At line 8 in file DisplayResult.s
   Uses
      At line 5 in file DisplayResult.s
Comment: start used once
stop 000001A8

Symbol: stop
   Definitions
      At line 164 in file DisplayResult.s
   Uses
      At line 164 in file DisplayResult.s
Comment: stop used once
whDividding 00000184

Symbol: whDividding
   Definitions
      At line 150 in file DisplayResult.s
   Uses
      At line 155 in file DisplayResult.s
Comment: whDividding used once
whilDiv 000000F0

Symbol: whilDiv
   Definitions
      At line 94 in file DisplayResult.s
   Uses
      At line 99 in file DisplayResult.s
Comment: whilDiv used once
whilePwrOfTen 00000140

Symbol: whilePwrOfTen
   Definitions
      At line 125 in file DisplayResult.s
   Uses
      At line 130 in file DisplayResult.s
Comment: whilePwrOfTen used once
whileRemainder 00000154

Symbol: whileRemainder
   Definitions
      At line 133 in file DisplayResult.s
   Uses
      At line 161 in file DisplayResult.s
Comment: whileRemainder used once
whlFindingDivisor 00000168

Symbol: whlFindingDivisor
   Definitions
      At line 140 in file DisplayResult.s
   Uses
      At line 145 in file DisplayResult.s
Comment: whlFindingDivisor used once



ARM Macro Assembler    Page 5 Alphabetic symbol ordering
Relocatable symbols

29 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

getkey 00000000

Symbol: getkey
   Definitions
      At line 3 in file DisplayResult.s
   Uses
      At line 15 in file DisplayResult.s
Comment: getkey used once
main 00000000

Symbol: main
   Definitions
      At line 2 in file DisplayResult.s
   Uses
      None
Comment: main unused
sendchar 00000000

Symbol: sendchar
   Definitions
      At line 4 in file DisplayResult.s
   Uses
      At line 27 in file DisplayResult.s
      At line 36 in file DisplayResult.s
      At line 45 in file DisplayResult.s
      At line 54 in file DisplayResult.s
      At line 63 in file DisplayResult.s
      At line 105 in file DisplayResult.s
      At line 110 in file DisplayResult.s
      At line 118 in file DisplayResult.s
      At line 159 in file DisplayResult.s

3 symbols
370 symbols in table
