


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             ExpEval, CODE, READONLY
    2 00000000                 IMPORT           main
    3 00000000                 IMPORT           getkey
    4 00000000                 IMPORT           sendchar
    5 00000000                 EXPORT           start
    6 00000000                 PRESERVE8
    7 00000000         
    8 00000000         start
    9 00000000         
   10 00000000 E3A04000        MOV              R4, #0      ;inputNumber = 0
   11 00000004 E3A0500A        LDR              R5, = 10    ;multiplicator = 10
                                                            
   12 00000008 E3A0A000        MOV              R10, #0     ;sign = 0
   13 0000000C         
   14 0000000C         read
   15 0000000C EBFFFFFE        BL               getkey      ; read key from con
                                                            sole
   16 00000010         
   17 00000010 E3500039        CMP              R0, #'9'    ; if ( ch == 0x0D )
                                                            {
   18 00000014 8A000025        BHI              nextgetchar ; skip next if stat
                                                            ement  
   19 00000018 E350000D        CMP              R0, #0x0D   ;}
   20 0000001C 0A000001        BEQ              isEnter     ; if( ch > '9' || c
                                                            h < '*' ){
   21 00000020 E350002A        CMP              R0, #'*'    ; skip to next inpu
                                                            t }
   22 00000024 3A000021        BLO              nextgetchar ;
   23 00000028         isEnter                              ;
   24 00000028         
   25 00000028 E350002B        CMP              R0, #'+'    ;if( key == +) 
   26 0000002C 1A000004        BNE              notPlus     ;{ 
   27 00000030 EBFFFFFE        BL               sendchar    ;send key to consol
                                                            e
   28 00000034 E3A0A02B        MOV              R10, #'+'   ;sign = '+'
   29 00000038 E1A06004        MOV              R6, R4      ;number1 = inputNum
                                                            ber
   30 0000003C E3A04000        MOV              R4, #0      ;number2 = 0
   31 00000040 EA00001A        B                nextNumber  ;skip computations 
                                                            for this character 
                                                            and continue while 
                                                            loop to get second 
                                                            number
   32 00000044         notPlus                              ; }
   33 00000044         
   34 00000044 E350002D        CMP              R0, #'-'    ;if(key == '-' )
   35 00000048 1A000004        BNE              notMinus    ;{
   36 0000004C EBFFFFFE        BL               sendchar    ; send key to conso
                                                            le
   37 00000050 E3A0A02D        MOV              R10, #'-'   ; sign = '-'
   38 00000054 E1A06004        MOV              R6, R4      ; number1 = inputNu
                                                            mber
   39 00000058 E3A04000        MOV              R4, #0      ; number2 = 0
   40 0000005C EA000013        B                nextNumber  ; skip computations
                                                             for this character
                                                             and continue while
                                                             loop to get second
                                                             number
   41 00000060         notMinus                             ;}



ARM Macro Assembler    Page 2 


   42 00000060         
   43 00000060 E350002A        CMP              R0, #'*'    ;if(key == '*')
   44 00000064 1A000004        BNE              notMul      ;{
   45 00000068 EBFFFFFE        BL               sendchar    ; send key to conso
                                                            le
   46 0000006C E3A0A02A        MOV              R10, #'*'   ; sign = '*'
   47 00000070 E1A06004        MOV              R6, R4      ; number1 = inputNu
                                                            mber
   48 00000074 E3A04000        MOV              R4, #0      ; number2 = 0
   49 00000078 EA00000C        B                nextNumber  ; skip computations
                                                             for this character
                                                             and continue while
                                                             loop to get second
                                                             number
   50 0000007C         notMul                               ;}
   51 0000007C         
   52 0000007C E350002F        CMP              R0, #'/'    ;if(key == '/')
   53 00000080 1A000004        BNE              notDiv      ;{
   54 00000084 EBFFFFFE        BL               sendchar    ; send key to conso
                                                            le
   55 00000088 E3A0A02F        MOV              R10, #'/'   ; sign = '/'
   56 0000008C E1A06004        MOV              R6, R4      ; number1 = inputNu
                                                            mber
   57 00000090 E3A04000        MOV              R4, #0      ; number2 = 0
   58 00000094 EA000005        B                nextNumber  ; skip computations
                                                             for this character
                                                             and continue while
                                                             loop to get second
                                                             number
   59 00000098         notDiv                               ;}
   60 00000098         
   61 00000098 E350000D        CMP              R0, #0x0D   ; while (key != CR)
                                                            
   62 0000009C 0A000004        BEQ              endRead     ; {
   63 000000A0 EBFFFFFE        BL               sendchar    ; send key to conso
                                                            le
   64 000000A4         
   65 000000A4 E0040495        MUL              R4, R5, R4  ; inputNumber = inp
                                                            utNumber * 10
   66 000000A8 E2400030        SUB              R0, R0, #'0' ; converting numbe
                                                            r from ASCII to dec
                                                            imal ( tmp = tmp - 
                                                            '0')
   67 000000AC E0844000        ADD              R4, R4, R0  ; total = tmp + key
                                                             entered
   68 000000B0         nextNumber
   69 000000B0         nextgetchar
   70 000000B0 EAFFFFD5        B                read        ; }
   71 000000B4         endRead
   72 000000B4         
   73 000000B4 E35A002B        CMP              R10, #'+'   ; if(sign == '+')
   74 000000B8 1A000000        BNE              dontAdd     ;{
   75 000000BC E0845006        ADD              R5, R4, R6  ;result = number1 +
                                                             number2
   76 000000C0         dontAdd                              ;}
   77 000000C0         
   78 000000C0 E35A002D        CMP              R10, #'-'   ;if(sign == '-')
   79 000000C4 1A000000        BNE              dontSub     ;{
   80 000000C8 E0565004        SUBS             R5, R6, R4  ; result = number1 



ARM Macro Assembler    Page 3 


                                                            - number2
   81 000000CC         
   82 000000CC         dontSub                              ;}
   83 000000CC         
   84 000000CC E35A002A        CMP              R10, #'*'   ;if(sign == '*')
   85 000000D0 1A000000        BNE              dontMul     ;{
   86 000000D4 E0050694        MUL              R5, R4, R6  ;result = number2 *
                                                             number1
   87 000000D8         dontMul                              ;}
   88 000000D8         
   89 000000D8 E35A002F        CMP              R10, #'/'   ;if(sign == '/'){
   90 000000DC 1A000008        BNE              dontDiv     ;
   91 000000E0 E3540000        CMP              R4, #0      ; if(number2 == 0){
                                                            
   92 000000E4 0A000006        BEQ              divZero     ; skip to the end o
                                                            f the program }
   93 000000E8 E3A05000        MOV              R5, #0      ; quotient = 0
   94 000000EC E1A08006        MOV              R8, R6      ; remainder = numbe
                                                            r2
   95 000000F0         whilDiv
   96 000000F0 E1580004        CMP              R8, R4      ;while(remainder =>
                                                             number2]{
   97 000000F4 BA000002        BLT              endDiv      ;  
   98 000000F8 E2855001        ADD              R5, R5, #1  ;quotient = quotien
                                                            t +1
   99 000000FC E0488004        SUB              R8, R8, R4  ;remainder = remain
                                                            der - number2 }
  100 00000100 EAFFFFFA        B                whilDiv     ;}
  101 00000104         
  102 00000104         endDiv
  103 00000104         dontDiv
  104 00000104         
  105 00000104         divZero
  106 00000104 EAFFFFFE 
                       stop    B                stop
  107 00000108         
  108 00000108                 END
Command Line: --debug --xref --diag_suppress=9931 --apcs=interwork --depend=.\e
xpeval.d -o.\expeval.o -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include
 -IC:\Keil_v5\ARM\INC\Philips --predefine="__EVAL SETA 1" --predefine="__MICROL
IB SETA 1" --predefine="__UVISION_VERSION SETA 524" --predefine="NO_CLOCK_SETUP
 SETA 1" --predefine="NO_EMC_SETUP SETA 1" --predefine="RAM_INTVEC SETA 1" --pr
edefine="RAM_MODE SETA 1" --predefine="REMAP SETA 1" --list=.\expeval.lst ExpEv
al.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

ExpEval 00000000

Symbol: ExpEval
   Definitions
      At line 1 in file ExpEval.s
   Uses
      None
Comment: ExpEval unused
divZero 00000104

Symbol: divZero
   Definitions
      At line 105 in file ExpEval.s
   Uses
      At line 92 in file ExpEval.s
Comment: divZero used once
dontAdd 000000C0

Symbol: dontAdd
   Definitions
      At line 76 in file ExpEval.s
   Uses
      At line 74 in file ExpEval.s
Comment: dontAdd used once
dontDiv 00000104

Symbol: dontDiv
   Definitions
      At line 103 in file ExpEval.s
   Uses
      At line 90 in file ExpEval.s
Comment: dontDiv used once
dontMul 000000D8

Symbol: dontMul
   Definitions
      At line 87 in file ExpEval.s
   Uses
      At line 85 in file ExpEval.s
Comment: dontMul used once
dontSub 000000CC

Symbol: dontSub
   Definitions
      At line 82 in file ExpEval.s
   Uses
      At line 79 in file ExpEval.s
Comment: dontSub used once
endDiv 00000104

Symbol: endDiv
   Definitions
      At line 102 in file ExpEval.s
   Uses
      At line 97 in file ExpEval.s
Comment: endDiv used once
endRead 000000B4

Symbol: endRead



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 71 in file ExpEval.s
   Uses
      At line 62 in file ExpEval.s
Comment: endRead used once
isEnter 00000028

Symbol: isEnter
   Definitions
      At line 23 in file ExpEval.s
   Uses
      At line 20 in file ExpEval.s
Comment: isEnter used once
nextNumber 000000B0

Symbol: nextNumber
   Definitions
      At line 68 in file ExpEval.s
   Uses
      At line 31 in file ExpEval.s
      At line 40 in file ExpEval.s
      At line 49 in file ExpEval.s
      At line 58 in file ExpEval.s

nextgetchar 000000B0

Symbol: nextgetchar
   Definitions
      At line 69 in file ExpEval.s
   Uses
      At line 18 in file ExpEval.s
      At line 22 in file ExpEval.s

notDiv 00000098

Symbol: notDiv
   Definitions
      At line 59 in file ExpEval.s
   Uses
      At line 53 in file ExpEval.s
Comment: notDiv used once
notMinus 00000060

Symbol: notMinus
   Definitions
      At line 41 in file ExpEval.s
   Uses
      At line 35 in file ExpEval.s
Comment: notMinus used once
notMul 0000007C

Symbol: notMul
   Definitions
      At line 50 in file ExpEval.s
   Uses
      At line 44 in file ExpEval.s
Comment: notMul used once
notPlus 00000044




ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

Symbol: notPlus
   Definitions
      At line 32 in file ExpEval.s
   Uses
      At line 26 in file ExpEval.s
Comment: notPlus used once
read 0000000C

Symbol: read
   Definitions
      At line 14 in file ExpEval.s
   Uses
      At line 70 in file ExpEval.s
Comment: read used once
start 00000000

Symbol: start
   Definitions
      At line 8 in file ExpEval.s
   Uses
      At line 5 in file ExpEval.s
Comment: start used once
stop 00000104

Symbol: stop
   Definitions
      At line 106 in file ExpEval.s
   Uses
      At line 106 in file ExpEval.s
Comment: stop used once
whilDiv 000000F0

Symbol: whilDiv
   Definitions
      At line 95 in file ExpEval.s
   Uses
      At line 100 in file ExpEval.s
Comment: whilDiv used once
19 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

getkey 00000000

Symbol: getkey
   Definitions
      At line 3 in file ExpEval.s
   Uses
      At line 15 in file ExpEval.s
Comment: getkey used once
main 00000000

Symbol: main
   Definitions
      At line 2 in file ExpEval.s
   Uses
      None
Comment: main unused
sendchar 00000000

Symbol: sendchar
   Definitions
      At line 4 in file ExpEval.s
   Uses
      At line 27 in file ExpEval.s
      At line 36 in file ExpEval.s
      At line 45 in file ExpEval.s
      At line 54 in file ExpEval.s
      At line 63 in file ExpEval.s

3 symbols
360 symbols in table
