


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             Sets, CODE, READONLY
    2 00000000                 IMPORT           main
    3 00000000                 IMPORT           sendchar
    4 00000000                 EXPORT           start
    5 00000000         
    6 00000000         start
    7 00000000         
    8 00000000 E59FA13C        LDR              R10,= AElems ; adrA = address(A
                                                            Elems)
    9 00000004 E59FC13C        LDR              R12,= CElems ; adrC = address(C
                                                            Elems)
   10 00000008         
   11 00000008 E59F513C        LDR              R5,= ASize  ; nA = address(ASiz
                                                            e)
   12 0000000C E5955000        LDR              R5, [R5]    ; nA = memory.word[
                                                            ASize]
   13 00000010 E59F6138        LDR              R6,= BSize  ; nB = address(BSiz
                                                            e)
   14 00000014 E5966000        LDR              R6, [R6]    ; nB = memory.word[
                                                            BSize}
   15 00000018         
   16 00000018 E3A03000        LDR              R3,= 0      ; cA = 0
   17 0000001C         
   18 0000001C         wh1
   19 0000001C E1530005        CMP              R3, R5      ; while(cA < nA){
   20 00000020 2A000019        BHS              endwh1      ;
   21 00000024 E59A1000        LDR              R1, [R10]   ; eA = memory.word[
                                                            adrA]
   22 00000028 E28AA004        ADD              R10, R10, #4 ; adrA += 4
   23 0000002C E2833001        ADD              R3, R3, #1  ; cA ++
   24 00000030 E3A04000        MOV              R4, #0      ; cB = 0
   25 00000034 E59FB118        LDR              R11,= BElems ; adrB = address(B
                                                            Elems)
   26 00000038         
   27 00000038         wh2
   28 00000038 E1540006        CMP              R4, R6      ; while(cB < nB)
   29 0000003C 2A000008        BHS              endwh2      ; {
   30 00000040 E59B2000        LDR              R2, [R11]   ; eB = memory.word[
                                                            adrB]
   31 00000044         
   32 00000044 E1520001        CMP              R2, R1      ; if(eA == eB)
   33 00000048 1A000002        BNE              endif1      ; {
   34 0000004C E3A00024        MOV              R0, #'$'    ; tmp = '$'
   35 00000050 E58B0000        STR              R0, [R11]   ; memory.word[adrB]
                                                             = tmp
   36 00000054 EA000002        B                endwh2
   37 00000058         endif1                               ;}
   38 00000058         
   39 00000058 E28BB004        ADD              R11, R11, #4 ; adrB += 4
   40 0000005C E2844001        ADD              R4, R4, #1  ; cB++
   41 00000060 EAFFFFF4        B                wh2         ;}
   42 00000064         endwh2
   43 00000064         
   44 00000064 E1540006        CMP              R4, R6      ; if(cB >= nB)
   45 00000068 3A000006        BLO              endif2      ; {
   46 0000006C E59F70E4        LDR              R7,= CSize  ; nC = address(CSiz
                                                            e)
   47 00000070 E5977000        LDR              R7, [R7]    ; nC = memory.word[
                                                            CSize]



ARM Macro Assembler    Page 2 


   48 00000074 E2877001        ADD              R7, R7, #1  ; nC++
   49 00000078 E59F00D8        LDR              R0,= CSize  ; tmp = address(CSi
                                                            ze)
   50 0000007C E5807000        STR              R7, [R0]    ; CSize = tmp
   51 00000080         
   52 00000080 E58C1000        STR              R1, [R12]   ; memory.word[adrC]
                                                             = nA
   53 00000084 E28CC004        ADD              R12, R12, #4 ; adrC += 4 }
   54 00000088         endif2
   55 00000088 EAFFFFE3        B                wh1
   56 0000008C         endwh1                               ; }
   57 0000008C         
   58 0000008C E59FB0C0        LDR              R11,= BElems ; adrB = address(B
                                                            Elems)
   59 00000090 E3A04000        MOV              R4, #0      ; cB = 0
   60 00000094         
   61 00000094         wh3
   62 00000094 E1540006        CMP              R4, R6      ; while(cB < nB)
   63 00000098 2A00001A        BHS              endwh3      ; {
   64 0000009C E59B2000        LDR              R2, [R11]   ; eB = memory.word[
                                                            adrB] 
   65 000000A0 E2844001        ADD              R4, R4, #1  ; cB ++
   66 000000A4 E28BB004        ADD              R11, R11, #4 ; adrB += 4
   67 000000A8         
   68 000000A8 E3520024        CMP              R2, #'$'    ; if(eB == '$')
   69 000000AC 1A000000        BNE              endifDol    ; { skip to next nu
                                                            mber }
   70 000000B0 EA000013        B                nextNum
   71 000000B4         endifDol
   72 000000B4         
   73 000000B4 E3A03000        LDR              R3,= 0      ; cA = 0 
   74 000000B8 E59FA084        LDR              R10,= AElems ; adrA = address(A
                                                            Elems)
   75 000000BC         
   76 000000BC         wh4
   77 000000BC E1530005        CMP              R3, R5      ; while(cA < nA)
   78 000000C0 2A000006        BHS              endwh4      ; {
   79 000000C4 E59A1000        LDR              R1, [R10]   ; eA = memory.word[
                                                            adrA]
   80 000000C8 E28AA004        ADD              R10, R10, #4 ; adrA += 4
   81 000000CC E2833001        ADD              R3, R3, #1  ; cA++
   82 000000D0         
   83 000000D0 E1520001        CMP              R2, R1      ; if(eA == eB)
   84 000000D4 1A000000        BNE              endif3      ; {
   85 000000D8 EA000000        B                endwh4
   86 000000DC         endif3                               ;}
   87 000000DC         
   88 000000DC EAFFFFF6        B                wh4         ;}
   89 000000E0         endwh4
   90 000000E0         
   91 000000E0 E1530005        CMP              R3, R5      ; if(cA >= nA)
   92 000000E4 3A000006        BLO              endif4      ; {
   93 000000E8 E59F7068        LDR              R7,= CSize  ; nC = address(CSiz
                                                            e)
   94 000000EC E5977000        LDR              R7, [R7]    ; nC = memory.word[
                                                            CSize]
   95 000000F0 E2877001        ADD              R7, R7, #1  ; nC++
   96 000000F4 E59F005C        LDR              R0,= CSize  ; tmp = address(CSi
                                                            ze)



ARM Macro Assembler    Page 3 


   97 000000F8 E5807000        STR              R7, [R0]    ; [CSize] = tmp
   98 000000FC         
   99 000000FC E58C2000        STR              R2, [R12]   ; memory.word[adrC]
                                                             = nB
  100 00000100 E28CC004        ADD              R12, R12, #4 ; adrC += 4 }
  101 00000104         endif4
  102 00000104         
  103 00000104         nextNum
  104 00000104 EAFFFFE2        B                wh3
  105 00000108         endwh3
  106 00000108         
  107 00000108         ;testing 
  108 00000108 E59FC038        LDR              R12,= CElems ; adrC = address(C
                                                            Elems)
  109 0000010C E59F7044        LDR              R7,= CSize  ; nC = address(CSiz
                                                            e)
  110 00000110 E5977000        LDR              R7, [R7]    ; nC = memory.word[
                                                            CSize]
  111 00000114 E3A08000        LDR              R8, = 0     ; count = 0
  112 00000118         
  113 00000118         tst
  114 00000118 E1580007        CMP              R8, R7      ;
  115 0000011C 2A000007        BHS              endwhTst    ;
  116 00000120 E59C0000        LDR              R0, [R12]   ;
  117 00000124 E2800030        ADD              R0, R0, #'0' ;
  118 00000128 EBFFFFFE        BL               sendchar    ; and sends it to t
                                                            he console 
  119 0000012C E3A0002C        LDR              R0,= ','    ;
  120 00000130 EBFFFFFE        BL               sendchar    ;
  121 00000134 E28CC004        ADD              R12, R12, #4 ;
  122 00000138 E2888001        ADD              R8, R8, #1  ;
  123 0000013C EAFFFFF5        B                tst
  124 00000140         endwhTst
  125 00000140         
  126 00000140         
  127 00000140         
  128 00000140         
  129 00000140 EAFFFFFE 
                       stop    B                stop
  130 00000144         
  131 00000144         
  132 00000144 00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000         AREA             TestData, DATA, READWRITE
  133 00000000         
  134 00000000 00000008 
                       ASize   DCD              8           ; Number of element
                                                            s in A
  135 00000004 00000004 



ARM Macro Assembler    Page 4 


              00000006 
              00000002 
              0000000D 
              00000013 
              00000007 
              00000001 
              00000003 AElems  DCD              4,6,2,13,19,7,1,3 
                                                            ; Elements of A
  136 00000024         
  137 00000024 00000006 
                       BSize   DCD              6           ; Number of element
                                                            s in B
  138 00000028 0000000D 
              00000009 
              00000001 
              00000009 
              00000005 
              00000008 BElems  DCD              13,9,1,9,5,8 ; Elements of B
  139 00000040         
  140 00000040 00000000 
                       CSize   DCD              0           ; Number of element
                                                            s in C
  141 00000044 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00    CElems  SPACE            56          ; Elements of C
  142 0000007C         
  143 0000007C                 END
Command Line: --debug --xref --diag_suppress=9931 --apcs=interwork --depend=.\s
ets.d -o.\sets.o -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\
Keil_v5\ARM\INC\Philips --predefine="__EVAL SETA 1" --predefine="__MICROLIB SET
A 1" --predefine="__UVISION_VERSION SETA 524" --predefine="NO_CLOCK_SETUP SETA 
1" --predefine="NO_EMC_SETUP SETA 1" --predefine="RAM_INTVEC SETA 1" --predefin
e="RAM_MODE SETA 1" --predefine="REMAP SETA 1" --list=.\sets.lst Sets.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

Sets 00000000

Symbol: Sets
   Definitions
      At line 1 in file Sets.s
   Uses
      None
Comment: Sets unused
endif1 00000058

Symbol: endif1
   Definitions
      At line 37 in file Sets.s
   Uses
      At line 33 in file Sets.s
Comment: endif1 used once
endif2 00000088

Symbol: endif2
   Definitions
      At line 54 in file Sets.s
   Uses
      At line 45 in file Sets.s
Comment: endif2 used once
endif3 000000DC

Symbol: endif3
   Definitions
      At line 86 in file Sets.s
   Uses
      At line 84 in file Sets.s
Comment: endif3 used once
endif4 00000104

Symbol: endif4
   Definitions
      At line 101 in file Sets.s
   Uses
      At line 92 in file Sets.s
Comment: endif4 used once
endifDol 000000B4

Symbol: endifDol
   Definitions
      At line 71 in file Sets.s
   Uses
      At line 69 in file Sets.s
Comment: endifDol used once
endwh1 0000008C

Symbol: endwh1
   Definitions
      At line 56 in file Sets.s
   Uses
      At line 20 in file Sets.s
Comment: endwh1 used once
endwh2 00000064

Symbol: endwh2



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 42 in file Sets.s
   Uses
      At line 29 in file Sets.s
      At line 36 in file Sets.s

endwh3 00000108

Symbol: endwh3
   Definitions
      At line 105 in file Sets.s
   Uses
      At line 63 in file Sets.s
Comment: endwh3 used once
endwh4 000000E0

Symbol: endwh4
   Definitions
      At line 89 in file Sets.s
   Uses
      At line 78 in file Sets.s
      At line 85 in file Sets.s

endwhTst 00000140

Symbol: endwhTst
   Definitions
      At line 124 in file Sets.s
   Uses
      At line 115 in file Sets.s
Comment: endwhTst used once
nextNum 00000104

Symbol: nextNum
   Definitions
      At line 103 in file Sets.s
   Uses
      At line 70 in file Sets.s
Comment: nextNum used once
start 00000000

Symbol: start
   Definitions
      At line 6 in file Sets.s
   Uses
      At line 4 in file Sets.s
Comment: start used once
stop 00000140

Symbol: stop
   Definitions
      At line 129 in file Sets.s
   Uses
      At line 129 in file Sets.s
Comment: stop used once
tst 00000118

Symbol: tst
   Definitions



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

      At line 113 in file Sets.s
   Uses
      At line 123 in file Sets.s
Comment: tst used once
wh1 0000001C

Symbol: wh1
   Definitions
      At line 18 in file Sets.s
   Uses
      At line 55 in file Sets.s
Comment: wh1 used once
wh2 00000038

Symbol: wh2
   Definitions
      At line 27 in file Sets.s
   Uses
      At line 41 in file Sets.s
Comment: wh2 used once
wh3 00000094

Symbol: wh3
   Definitions
      At line 61 in file Sets.s
   Uses
      At line 104 in file Sets.s
Comment: wh3 used once
wh4 000000BC

Symbol: wh4
   Definitions
      At line 76 in file Sets.s
   Uses
      At line 88 in file Sets.s
Comment: wh4 used once
19 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

AElems 00000004

Symbol: AElems
   Definitions
      At line 135 in file Sets.s
   Uses
      At line 8 in file Sets.s
      At line 74 in file Sets.s

ASize 00000000

Symbol: ASize
   Definitions
      At line 134 in file Sets.s
   Uses
      At line 11 in file Sets.s
Comment: ASize used once
BElems 00000028

Symbol: BElems
   Definitions
      At line 138 in file Sets.s
   Uses
      At line 25 in file Sets.s
      At line 58 in file Sets.s

BSize 00000024

Symbol: BSize
   Definitions
      At line 137 in file Sets.s
   Uses
      At line 13 in file Sets.s
Comment: BSize used once
CElems 00000044

Symbol: CElems
   Definitions
      At line 141 in file Sets.s
   Uses
      At line 9 in file Sets.s
      At line 108 in file Sets.s

CSize 00000040

Symbol: CSize
   Definitions
      At line 140 in file Sets.s
   Uses
      At line 46 in file Sets.s
      At line 49 in file Sets.s
      At line 93 in file Sets.s
      At line 96 in file Sets.s
      At line 109 in file Sets.s

TestData 00000000

Symbol: TestData
   Definitions



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

      At line 132 in file Sets.s
   Uses
      None
Comment: TestData unused
7 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

main 00000000

Symbol: main
   Definitions
      At line 2 in file Sets.s
   Uses
      None
Comment: main unused
sendchar 00000000

Symbol: sendchar
   Definitions
      At line 3 in file Sets.s
   Uses
      At line 118 in file Sets.s
      At line 120 in file Sets.s

2 symbols
368 symbols in table
