


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             FpAdd, CODE, READONLY
    2 00000000                 IMPORT           main
    3 00000000                 EXPORT           start
    4 00000000         
    5 00000000         start
    6 00000000         
    7 00000000         ;
    8 00000000         ; Part 1 - decode
    9 00000000         ;
   10 00000000         
   11 00000000 E59F0134        LDR              r0, =0xbf09999a 
                                                            ; fpval1 = -0.5375
   12 00000004 E59F1134        LDR              r1, =0xbd19999a 
                                                            ; fpval2 = -0.0375
   13 00000008         
   14 00000008 EB000000        BL               fpadd
   15 0000000C         
   16 0000000C EAFFFFFE 
                       stop    B                stop
   17 00000010         
   18 00000010         ; fpadd subroutine
   19 00000010         ; Adds two IEEE754 single precision floating point value
                       s
   20 00000010         ; Parameters:
   21 00000010         ;   R0: first floating point value
   22 00000010         ;   R1: second floating point value
   23 00000010         ; Return value:
   24 00000010         ;   R0: floating point result
   25 00000010         ;
   26 00000010         fpadd
   27 00000010 E92D43F8        STMFD            sp!, {R3-R9 ,lr}
   28 00000014         
   29 00000014 E59F3128        LDR              R3, =0x007FFFFF ; Loading 0 000
                                                            0 0000 1111 1111 11
                                                            11 1111 1111 111 in
                                                             R3
   30 00000018 E59F4128        LDR              R4, =0x7F800000 ; Loading 0 111
                                                            1 1111 0000 0000 00
                                                            00 0000 0000 000 in
                                                             R4
   31 0000001C         
   32 0000001C         ;check if they are negative 
   33 0000001C E3A0B000        LDR              R11,= 0     ; signvalue1 = fals
                                                            e;
   34 00000020 E3A0C000        LDR              R12,= 0     ;signvalue2 = false
                                                            
   35 00000024 E3E09102        LDR              R9, =0x7FFFFFFF
   36 00000028 E1C0A009        BIC              R10, R0, R9 ;keep only sign bit
                                                             of value1
   37 0000002C         
   38 0000002C E35A0102        CMP              R10, #0x80000000 ; if(sign bit 
                                                            == 1) 
   39 00000030 1A000000        BNE              notnegative
   40 00000034 E28BB001        ADD              R11, R11, #1 
                                                            ;signvalue1 = true;
                                                            
   41 00000038         notnegative
   42 00000038         
   43 00000038 E1C1A009        BIC              R10, R1, R9 ;



ARM Macro Assembler    Page 2 


   44 0000003C E35A0102        CMP              R10, #0x80000000 ; 
   45 00000040 1A000000        BNE              notnegative2
   46 00000044 E28CC001        ADD              R12, R12, #1 ;
   47 00000048         notnegative2
   48 00000048         
   49 00000048         
   50 00000048         ;Getting the exponent values from the floating point val
                       ues
   51 00000048 E0045000        AND              R5, R4, R0  ; exponent1 = value
                                                            1 AND 0x7F800000
   52 0000004C E0047001        AND              R7, R4, R1  ; exponent2 = value
                                                            2 AND 0x7F800000
   53 00000050         
   54 00000050         ;Getting the fraction values from the floating point val
                       ues
   55 00000050 E0036000        AND              R6, R3, R0  ; fraction1 = value
                                                            1 AND 0x007FFFFF 
   56 00000054 E0038001        AND              R8, R3, R1  ; fraction2 = value
                                                            2 AND 0x007FFFFF 
   57 00000058         
   58 00000058 E1A05BA5        MOV              R5, R5, LSR #23 ; shift exponen
                                                            t to be in first 8 
                                                            bits(8 less signifi
                                                            cant bit) 
   59 0000005C E1A07BA7        MOV              R7, R7, LSR #23 ; same as above
                                                             : exponent = expon
                                                            ent >> 23
   60 00000060 E3A0907F        LDR              R9, =127
   61 00000064 E0555009        SUBS             R5, R5, R9  ; exponent1 -= 127 
                                                                 converting exp
                                                            onent back to origi
                                                            nal exponent value 
                                                            (bc of : 2^(e-b))
   62 00000068 E0577009        SUBS             R7, R7, R9  ; exponent2 -= 127
   63 0000006C         
   64 0000006C E1550007        CMP              R5, R7
   65 00000070 3A000001        BLO              othersub
   66 00000074 E0559007        SUBS             R9, R5, R7  ; tmp = exponent1 -
                                                             exponent2 
   67 00000078 EA000000        B                skipothersub
   68 0000007C         othersub
   69 0000007C E0579005        SUBS             R9, R7, R5  ; tmp = exponent1 -
                                                             exponent2  
   70 00000080         skipothersub
   71 00000080 E3590000        CMP              R9, #0      ;
   72 00000084 2A000001        BHS              notneg
   73 00000088 E3E00000        LDR              R0,= -1     ;
   74 0000008C E0090990        MUL              R9, R0, R9  ;
   75 00000090         notneg
   76 00000090 E1550007        CMP              R5, R7      ;if(exponent1 = exp
                                                            onent2){
   77 00000094 0A00000C        BEQ              ignore      ; 
   78 00000098 E1550007        CMP              R5, R7      ; } else if(exponen
                                                            t1>exponent2){
   79 0000009C 3A000005        BLO              exp2IsGreater
   80 000000A0         ;shift fraction2 by R9
   81 000000A0 E1A00009        MOV              R0, R9      ;
   82 000000A4 E1A01008        MOV              R1, R8      ;
   83 000000A8 EB00001E        BL               shitft      ;fraction2 = shitf(



ARM Macro Assembler    Page 3 


                                                            tmp, fraction2)
   84 000000AC E1A08001        MOV              R8, R1      ;exponent2 = expone
                                                            nt1
   85 000000B0 E1A07005        MOV              R7, R5      ; } else{
   86 000000B4 EA000004        B                ignore
   87 000000B8         exp2IsGreater
   88 000000B8         ;shift fraction1 by R9
   89 000000B8 E1A00009        MOV              R0, R9      ; 
   90 000000BC E1A01006        MOV              R1, R6      ;
   91 000000C0 EB000018        BL               shitft      ;fraction1 = shitf(
                                                            tmp, fraction1)
   92 000000C4 E1A06001        MOV              R6, R1      ;exponent1 = expone
                                                            nt2
   93 000000C8 E1A05007        MOV              R5, R7
   94 000000CC         ignore                               ; }
   95 000000CC         
   96 000000CC E35B0000        CMP              R11, #0
   97 000000D0 1A000005        BNE              firstnumbernegative
   98 000000D4 E35C0000        CMP              R12, #0
   99 000000D8 1A000001        BNE              second
  100 000000DC E0866008        ADD              R6, R6, R8  ; add = fraction1 +
                                                             fraction2 
  101 000000E0 EA000007        B                finishedadd
  102 000000E4         second
  103 000000E4 E0466008        SUB              R6, R6, R8  ;
  104 000000E8 EA000005        B                finishedadd
  105 000000EC         firstnumbernegative
  106 000000EC E35C0000        CMP              R12, #0
  107 000000F0 1A000001        BNE              bothnegatives
  108 000000F4 E0486006        SUB              R6, R8, R6  ; 
  109 000000F8 EA000001        B                finishedadd
  110 000000FC         bothnegatives
  111 000000FC E0866008        ADD              R6, R6, R8  ; add = fraction1 +
                                                             fraction2  
  112 00000100 E2866102        ADD              R6,R6, #0x80000000 ;
  113 00000104         finishedadd
  114 00000104         
  115 00000104 E3560000        CMP              R6, #0      ;
  116 00000108 2A000002        BHS              dontaddsignbit
  117 0000010C E3E0A000        LDR              R10,=-1     ;
  118 00000110 E006069A        MUL              R6,R10,R6   ;
  119 00000114 E2866102        ADD              R6,R6, #0x80000000 ;
  120 00000118         dontaddsignbit
  121 00000118         
  122 00000118 E287707F        ADD              R7, R7, #127 ; exponent = expon
                                                            ent + 127 (converti
                                                            ng back to 2^e-b) 
  123 0000011C E1A07B87        MOV              R7, R7, LSL #23 ; exponent << 2
                                                            3   (shift back exp
                                                            onent to original p
                                                            osition) 
  124 00000120 E0860007        ADD              R0, R6, R7  ; result = add ++ e
                                                            xponent
  125 00000124         
  126 00000124         
  127 00000124 E8BD83F8        LDMFD            sp!, {R3-R9 ,pc}
  128 00000128         
  129 00000128         ; shitft subroutine
  130 00000128         ; shifts the given fraction by a set value of bits



ARM Macro Assembler    Page 4 


  131 00000128         ; Parameters:
  132 00000128         ;   R0: quantity to shift
  133 00000128         ;   R1: fraction to shift
  134 00000128         ; Return value:
  135 00000128         ;   R1: shifted fraction
  136 00000128         shitft
  137 00000128 E92D4018        STMFD            sp!, {R3-R4 ,lr} 
                                                            ; save registers
  138 0000012C E1A04000        MOV              R4, R0      ; quantity
  139 00000130 E2811502        ADD              R1, R1, #0x00800000 ; adding th
                                                            e 1.XXX that isn't 
                                                            contained in the fr
                                                            action :    fractio
                                                            n = fraction + 0x00
                                                            800000
  140 00000134 E1A01431        MOV              R1, R1, LSR R4 ; fraction >> qu
                                                            antity
  141 00000138 E8BD8018        LDMFD            sp!, {R3-R4 ,pc} 
                                                            ; restore registers
                                                            
  142 0000013C                 END
              BF09999A 
              BD19999A 
              007FFFFF 
              7F800000 
Command Line: --debug --xref --diag_suppress=9931 --apcs=interwork --depend=.\f
padd.d -o.\fpadd.o -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC
:\Keil_v5\ARM\INC\Philips --predefine="__EVAL SETA 1" --predefine="__MICROLIB S
ETA 1" --predefine="__UVISION_VERSION SETA 524" --predefine="NO_CLOCK_SETUP SET
A 1" --predefine="NO_EMC_SETUP SETA 1" --predefine="RAM_INTVEC SETA 1" --predef
ine="RAM_MODE SETA 1" --predefine="REMAP SETA 1" --list=.\fpadd.lst FpAdd.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

FpAdd 00000000

Symbol: FpAdd
   Definitions
      At line 1 in file FpAdd.s
   Uses
      None
Comment: FpAdd unused
bothnegatives 000000FC

Symbol: bothnegatives
   Definitions
      At line 110 in file FpAdd.s
   Uses
      At line 107 in file FpAdd.s
Comment: bothnegatives used once
dontaddsignbit 00000118

Symbol: dontaddsignbit
   Definitions
      At line 120 in file FpAdd.s
   Uses
      At line 116 in file FpAdd.s
Comment: dontaddsignbit used once
exp2IsGreater 000000B8

Symbol: exp2IsGreater
   Definitions
      At line 87 in file FpAdd.s
   Uses
      At line 79 in file FpAdd.s
Comment: exp2IsGreater used once
finishedadd 00000104

Symbol: finishedadd
   Definitions
      At line 113 in file FpAdd.s
   Uses
      At line 101 in file FpAdd.s
      At line 104 in file FpAdd.s
      At line 109 in file FpAdd.s

firstnumbernegative 000000EC

Symbol: firstnumbernegative
   Definitions
      At line 105 in file FpAdd.s
   Uses
      At line 97 in file FpAdd.s
Comment: firstnumbernegative used once
fpadd 00000010

Symbol: fpadd
   Definitions
      At line 26 in file FpAdd.s
   Uses
      At line 14 in file FpAdd.s
Comment: fpadd used once
ignore 000000CC



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols


Symbol: ignore
   Definitions
      At line 94 in file FpAdd.s
   Uses
      At line 77 in file FpAdd.s
      At line 86 in file FpAdd.s

notneg 00000090

Symbol: notneg
   Definitions
      At line 75 in file FpAdd.s
   Uses
      At line 72 in file FpAdd.s
Comment: notneg used once
notnegative 00000038

Symbol: notnegative
   Definitions
      At line 41 in file FpAdd.s
   Uses
      At line 39 in file FpAdd.s
Comment: notnegative used once
notnegative2 00000048

Symbol: notnegative2
   Definitions
      At line 47 in file FpAdd.s
   Uses
      At line 45 in file FpAdd.s
Comment: notnegative2 used once
othersub 0000007C

Symbol: othersub
   Definitions
      At line 68 in file FpAdd.s
   Uses
      At line 65 in file FpAdd.s
Comment: othersub used once
second 000000E4

Symbol: second
   Definitions
      At line 102 in file FpAdd.s
   Uses
      At line 99 in file FpAdd.s
Comment: second used once
shitft 00000128

Symbol: shitft
   Definitions
      At line 136 in file FpAdd.s
   Uses
      At line 83 in file FpAdd.s
      At line 91 in file FpAdd.s

skipothersub 00000080




ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

Symbol: skipothersub
   Definitions
      At line 70 in file FpAdd.s
   Uses
      At line 67 in file FpAdd.s
Comment: skipothersub used once
start 00000000

Symbol: start
   Definitions
      At line 5 in file FpAdd.s
   Uses
      At line 3 in file FpAdd.s
Comment: start used once
stop 0000000C

Symbol: stop
   Definitions
      At line 16 in file FpAdd.s
   Uses
      At line 16 in file FpAdd.s
Comment: stop used once
17 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

main 00000000

Symbol: main
   Definitions
      At line 2 in file FpAdd.s
   Uses
      None
Comment: main unused
1 symbol
358 symbols in table
