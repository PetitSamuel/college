


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             Shift64, CODE, READONLY
    2 00000000                 IMPORT           main
    3 00000000                 EXPORT           start
    4 00000000         
    5 00000000         start
    6 00000000 E3E00000        LDR              R0, =0xFFFFFFFF ;
    7 00000004 E3E01000        LDR              R1, =0xFFFFFFFF ;
    8 00000008 E3A02004        LDR              R2, =4      ; sign = -1 (test v
                                                            alue)
    9 0000000C         
   10 0000000C E3A03000        LDR              R3, =0      ; count = 0
   11 00000010         
   12 00000010 E3520000        CMP              R2, #0      ; if(sign < 0)
   13 00000014 BA000003        BLT              whNeg       ; { go to negative 
                                                            loop}
   14 00000018 E3520000        CMP              R2, #0      ; else if{ sign < 0
                                                            )
   15 0000001C 8A00000C        BHI              whPos       ;{ go to negative l
                                                            oop}
   16 00000020 E3520000        CMP              R2, #0      ;else if(sign == 0)
                                                            {
   17 00000024 CA000014        BGT              end         ; go to end of prog
                                                            ram}
   18 00000028         
   19 00000028         whNeg
   20 00000028 E1530002        CMP              R3, R2      ; while(count > sig
                                                            n ) { 
   21 0000002C DA000007        BLE              eWhNeg
   22 00000030 E2433001        SUB              R3, R3, #1  ; Count--
   23 00000034 E1A01081        MOV              R1, R1, LSL#1 ; R1 << 1
   24 00000038 E1B00080        MOVS             R0, R0, LSL#1 ; R0 << 1
   25 0000003C E0A44000        ADC              R4, R0      ; tmp = R0+carry
   26 00000040 E1540000        CMP              R4, R0      ; if (tmp != R0)
   27 00000044 0A000000        BEQ              eif         ; {
   28 00000048 E2811001        ADD              R1, R1, #1  ; R1++ } 
   29 0000004C         eif
   30 0000004C EAFFFFF5        B                whNeg       ;} 
   31 00000050         eWhNeg
   32 00000050 EA000009        B                end         ;
   33 00000054         
   34 00000054         whPos
   35 00000054 E1530002        CMP              R3, R2      ; while(count < sig
                                                            n){
   36 00000058 AA000007        BGE              ewhPos
   37 0000005C E2833001        ADD              R3, R3, #1  ; count++
   38 00000060 E1A000A0        MOV              R0, R0, LSR #1 ; R0 >>1
   39 00000064 E1B010A1        MOVS             R1, R1, LSR #1 
                                                            ; R1 >> 1 (Flags!)
   40 00000068         
   41 00000068 E0A44001        ADC              R4, R1      ; tmp = R1+ carry
   42 0000006C         
   43 0000006C E1540001        CMP              R4, R1      ; if(tmp != R1){
   44 00000070 0A000000        BEQ              eif2
   45 00000074 E2800102        ADD              R0, R0, #0x80000000 
                                                            ; R1 += 0x80000000
   46 00000078         eif2                                 ;     }
   47 00000078 EAFFFFF5        B                whPos
   48 0000007C         ewhPos
   49 0000007C         end



ARM Macro Assembler    Page 2 


   50 0000007C EAFFFFFE 
                       stop    B                stop
   51 00000080         
   52 00000080         
   53 00000080                 END
Command Line: --debug --xref --diag_suppress=9931 --apcs=interwork --depend=.\s
hift64.d -o.\shift64.o -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include
 -IC:\Keil_v5\ARM\INC\Philips --predefine="__EVAL SETA 1" --predefine="__MICROL
IB SETA 1" --predefine="__UVISION_VERSION SETA 524" --predefine="NO_CLOCK_SETUP
 SETA 1" --predefine="NO_EMC_SETUP SETA 1" --predefine="RAM_INTVEC SETA 1" --pr
edefine="RAM_MODE SETA 1" --predefine="REMAP SETA 1" --list=.\shift64.lst Shift
64.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

Shift64 00000000

Symbol: Shift64
   Definitions
      At line 1 in file Shift64.s
   Uses
      None
Comment: Shift64 unused
eWhNeg 00000050

Symbol: eWhNeg
   Definitions
      At line 31 in file Shift64.s
   Uses
      At line 21 in file Shift64.s
Comment: eWhNeg used once
eif 0000004C

Symbol: eif
   Definitions
      At line 29 in file Shift64.s
   Uses
      At line 27 in file Shift64.s
Comment: eif used once
eif2 00000078

Symbol: eif2
   Definitions
      At line 46 in file Shift64.s
   Uses
      At line 44 in file Shift64.s
Comment: eif2 used once
end 0000007C

Symbol: end
   Definitions
      At line 49 in file Shift64.s
   Uses
      At line 17 in file Shift64.s
      At line 32 in file Shift64.s

ewhPos 0000007C

Symbol: ewhPos
   Definitions
      At line 48 in file Shift64.s
   Uses
      At line 36 in file Shift64.s
Comment: ewhPos used once
start 00000000

Symbol: start
   Definitions
      At line 5 in file Shift64.s
   Uses
      At line 3 in file Shift64.s
Comment: start used once
stop 0000007C




ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

Symbol: stop
   Definitions
      At line 50 in file Shift64.s
   Uses
      At line 50 in file Shift64.s
Comment: stop used once
whNeg 00000028

Symbol: whNeg
   Definitions
      At line 19 in file Shift64.s
   Uses
      At line 13 in file Shift64.s
      At line 30 in file Shift64.s

whPos 00000054

Symbol: whPos
   Definitions
      At line 34 in file Shift64.s
   Uses
      At line 15 in file Shift64.s
      At line 47 in file Shift64.s

10 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

main 00000000

Symbol: main
   Definitions
      At line 2 in file Shift64.s
   Uses
      None
Comment: main unused
1 symbol
349 symbols in table
